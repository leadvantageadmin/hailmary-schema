# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class CustomerActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Customer]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Customer.prisma().query_raw(
            'SELECT * FROM Customer WHERE id = $1',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Customer
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Customer.prisma().query_first(
            'SELECT * FROM Customer WHERE salutation = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.CustomerCreateInput,
        include: Optional[types.CustomerInclude] = None
    ) -> _PrismaModelT:
        """Create a new Customer record.

        Parameters
        ----------
        data
            Customer record data
        include
            Specifies which relations should be loaded on the returned Customer model

        Returns
        -------
        prisma.models.Customer
            The created Customer record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Customer record from just the required fields
        customer = await Customer.prisma().create(
            data={
                # data to create a Customer record
                'externalSource': 'ggciceaie',
                'externalId': 'bbehjachib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.CustomerCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Customer records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Customer record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Customer.prisma().create_many(
            data=[
                {
                    # data to create a Customer record
                    'externalSource': 'cadfabfehe',
                    'externalId': 'dgiiaaijj',
                },
                {
                    # data to create a Customer record
                    'externalSource': 'bfaiacjjfc',
                    'externalId': 'eigcfgbif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.CustomerWhereUniqueInput,
        include: Optional[types.CustomerInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Customer record.

        Parameters
        ----------
        where
            Customer filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Customer model

        Returns
        -------
        prisma.models.Customer
            The deleted Customer record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        customer = await Customer.prisma().delete(
            where={
                'id': 'bagcfbhiig',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.CustomerWhereUniqueInput,
        include: Optional[types.CustomerInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Customer record.

        Parameters
        ----------
        where
            Customer filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Customer model

        Returns
        -------
        prisma.models.Customer
            The found Customer record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        customer = await Customer.prisma().find_unique(
            where={
                'id': 'cghideieh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.CustomerWhereUniqueInput,
        include: Optional[types.CustomerInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Customer record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Customer filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Customer model

        Returns
        -------
        prisma.models.Customer
            The found Customer record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        customer = await Customer.prisma().find_unique_or_raise(
            where={
                'id': 'biabhbdai',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CustomerWhereInput] = None,
        cursor: Optional[types.CustomerWhereUniqueInput] = None,
        include: Optional[types.CustomerInclude] = None,
        order: Optional[Union[types.CustomerOrderByInput, List[types.CustomerOrderByInput]]] = None,
        distinct: Optional[List[types.CustomerScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Customer records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Customer records returned
        skip
            Ignore the first N results
        where
            Customer filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Customer model
        order
            Order the returned Customer records by any field
        distinct
            Filter Customer records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Customer]
            The list of all Customer records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Customer records
        customers = await Customer.prisma().find_many(take=10)

        # find the first 5 Customer records ordered by the firstName field
        customers = await Customer.prisma().find_many(
            take=5,
            order={
                'firstName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CustomerWhereInput] = None,
        cursor: Optional[types.CustomerWhereUniqueInput] = None,
        include: Optional[types.CustomerInclude] = None,
        order: Optional[Union[types.CustomerOrderByInput, List[types.CustomerOrderByInput]]] = None,
        distinct: Optional[List[types.CustomerScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Customer record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Customer filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Customer model
        order
            Order the returned Customer records by any field
        distinct
            Filter Customer records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Customer
            The first Customer record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Customer record ordered by the lastName field
        customer = await Customer.prisma().find_first(
            skip=1,
            order={
                'lastName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CustomerWhereInput] = None,
        cursor: Optional[types.CustomerWhereUniqueInput] = None,
        include: Optional[types.CustomerInclude] = None,
        order: Optional[Union[types.CustomerOrderByInput, List[types.CustomerOrderByInput]]] = None,
        distinct: Optional[List[types.CustomerScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Customer record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Customer filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Customer model
        order
            Order the returned Customer records by any field
        distinct
            Filter Customer records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Customer
            The first Customer record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Customer record ordered by the email field
        customer = await Customer.prisma().find_first_or_raise(
            skip=1,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.CustomerUpdateInput,
        where: types.CustomerWhereUniqueInput,
        include: Optional[types.CustomerInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Customer record.

        Parameters
        ----------
        data
            Customer record data specifying what to update
        where
            Customer filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Customer model

        Returns
        -------
        prisma.models.Customer
            The updated Customer record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        customer = await Customer.prisma().update(
            where={
                'id': 'idghgaicb',
            },
            data={
                # data to update the Customer record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.CustomerWhereUniqueInput,
        data: types.CustomerUpsertInput,
        include: Optional[types.CustomerInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Customer filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Customer model

        Returns
        -------
        prisma.models.Customer
            The created or updated Customer record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        customer = await Customer.prisma().upsert(
            where={
                'id': 'fjfddhigg',
            },
            data={
                'create': {
                    'id': 'fjfddhigg',
                    'externalSource': 'bfaiacjjfc',
                    'externalId': 'eigcfgbif',
                },
                'update': {
                    'externalSource': 'bfaiacjjfc',
                    'externalId': 'eigcfgbif',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.CustomerUpdateManyMutationInput,
        where: types.CustomerWhereInput,
    ) -> int:
        """Update multiple Customer records

        Parameters
        ----------
        data
            Customer data to update the selected Customer records to
        where
            Filter to select the Customer records to update

        Returns
        -------
        int
            The total number of Customer records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Customer records
        total = await Customer.prisma().update_many(
            data={
                'company': 'hjaecfifb'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CustomerWhereInput] = None,
        cursor: Optional[types.CustomerWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Customer records present in the database

        Parameters
        ----------
        select
            Select the Customer fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Customer filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CustomerCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Customer.prisma().count()

        # results: prisma.types.CustomerCountAggregateOutput
        results = await Customer.prisma().count(
            select={
                '_all': True,
                'address': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.CustomerCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CustomerWhereInput] = None,
        cursor: Optional[types.CustomerWhereUniqueInput] = None,
    ) -> types.CustomerCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.CustomerCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CustomerWhereInput] = None,
        cursor: Optional[types.CustomerWhereUniqueInput] = None,
    ) -> Union[int, types.CustomerCountAggregateOutput]:
        """Count the number of Customer records present in the database

        Parameters
        ----------
        select
            Select the Customer fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Customer filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CustomerCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Customer.prisma().count()

        # results: prisma.types.CustomerCountAggregateOutput
        results = await Customer.prisma().count(
            select={
                '_all': True,
                'city': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.CustomerCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.CustomerWhereInput] = None
    ) -> int:
        """Delete multiple Customer records.

        Parameters
        ----------
        where
            Optional Customer filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Customer records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Customer records
        total = await Customer.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.CustomerScalarFieldKeys'],
        *,
        where: Optional['types.CustomerWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.CustomerAvgAggregateInput'] = None,
        sum: Optional['types.CustomerSumAggregateInput'] = None,
        min: Optional['types.CustomerMinAggregateInput'] = None,
        max: Optional['types.CustomerMaxAggregateInput'] = None,
        having: Optional['types.CustomerScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.CustomerCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.CustomerScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.CustomerScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.CustomerGroupByOutput']:
        """Group Customer records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Customer fields to group records by
        where
            Customer filter to select records
        take
            Limit the maximum number of Customer records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.CustomerGroupByOutput]
            A list of dictionaries representing the Customer record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Customer records by state values
        # and count how many records are in each group
        results = await Customer.prisma().group_by(
            ['state'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class CompanyActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Company]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Company.prisma().query_raw(
            'SELECT * FROM Company WHERE id = $1',
            'cbbbjbfcii',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Company
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Company.prisma().query_first(
            'SELECT * FROM Company WHERE domain = $1',
            'bbejhfidcb',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.CompanyCreateInput,
        include: Optional[types.CompanyInclude] = None
    ) -> _PrismaModelT:
        """Create a new Company record.

        Parameters
        ----------
        data
            Company record data
        include
            Specifies which relations should be loaded on the returned Company model

        Returns
        -------
        prisma.models.Company
            The created Company record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Company record from just the required fields
        company = await Company.prisma().create(
            data={
                # data to create a Company record
                'id': 'bgeecijdgg',
                'domain': 'bdiicjafbj',
                'externalSource': 'bgehebiafc',
                'externalId': 'bghffegacj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.CompanyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Company records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Company record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Company.prisma().create_many(
            data=[
                {
                    # data to create a Company record
                    'id': 'bhghchehcc',
                    'domain': 'dcgchcbbf',
                    'externalSource': 'bdedcabahc',
                    'externalId': 'ghfhiafcb',
                },
                {
                    # data to create a Company record
                    'id': 'heejgedji',
                    'domain': 'bjgjgibgbf',
                    'externalSource': 'bbbgbhfjge',
                    'externalId': 'igbehcbab',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.CompanyWhereUniqueInput,
        include: Optional[types.CompanyInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Company record.

        Parameters
        ----------
        where
            Company filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Company model

        Returns
        -------
        prisma.models.Company
            The deleted Company record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        company = await Company.prisma().delete(
            where={
                'id': 'bdadaadhag',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.CompanyWhereUniqueInput,
        include: Optional[types.CompanyInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Company record.

        Parameters
        ----------
        where
            Company filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Company model

        Returns
        -------
        prisma.models.Company
            The found Company record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        company = await Company.prisma().find_unique(
            where={
                'id': 'bgiggdidbf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.CompanyWhereUniqueInput,
        include: Optional[types.CompanyInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Company record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Company filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Company model

        Returns
        -------
        prisma.models.Company
            The found Company record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        company = await Company.prisma().find_unique_or_raise(
            where={
                'id': 'caaaedabfc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CompanyWhereInput] = None,
        cursor: Optional[types.CompanyWhereUniqueInput] = None,
        include: Optional[types.CompanyInclude] = None,
        order: Optional[Union[types.CompanyOrderByInput, List[types.CompanyOrderByInput]]] = None,
        distinct: Optional[List[types.CompanyScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Company records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Company records returned
        skip
            Ignore the first N results
        where
            Company filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Company model
        order
            Order the returned Company records by any field
        distinct
            Filter Company records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Company]
            The list of all Company records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Company records
        companys = await Company.prisma().find_many(take=10)

        # find the first 5 Company records ordered by the name field
        companys = await Company.prisma().find_many(
            take=5,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CompanyWhereInput] = None,
        cursor: Optional[types.CompanyWhereUniqueInput] = None,
        include: Optional[types.CompanyInclude] = None,
        order: Optional[Union[types.CompanyOrderByInput, List[types.CompanyOrderByInput]]] = None,
        distinct: Optional[List[types.CompanyScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Company record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Company filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Company model
        order
            Order the returned Company records by any field
        distinct
            Filter Company records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Company
            The first Company record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Company record ordered by the industry field
        company = await Company.prisma().find_first(
            skip=1,
            order={
                'industry': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CompanyWhereInput] = None,
        cursor: Optional[types.CompanyWhereUniqueInput] = None,
        include: Optional[types.CompanyInclude] = None,
        order: Optional[Union[types.CompanyOrderByInput, List[types.CompanyOrderByInput]]] = None,
        distinct: Optional[List[types.CompanyScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Company record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Company filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Company model
        order
            Order the returned Company records by any field
        distinct
            Filter Company records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Company
            The first Company record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Company record ordered by the minEmployeeSize field
        company = await Company.prisma().find_first_or_raise(
            skip=1,
            order={
                'minEmployeeSize': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.CompanyUpdateInput,
        where: types.CompanyWhereUniqueInput,
        include: Optional[types.CompanyInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Company record.

        Parameters
        ----------
        data
            Company record data specifying what to update
        where
            Company filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Company model

        Returns
        -------
        prisma.models.Company
            The updated Company record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        company = await Company.prisma().update(
            where={
                'id': 'bigibebcib',
            },
            data={
                # data to update the Company record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.CompanyWhereUniqueInput,
        data: types.CompanyUpsertInput,
        include: Optional[types.CompanyInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Company filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Company model

        Returns
        -------
        prisma.models.Company
            The created or updated Company record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        company = await Company.prisma().upsert(
            where={
                'id': 'bigaiehgcc',
            },
            data={
                'create': {
                    'id': 'bigaiehgcc',
                    'domain': 'bjgjgibgbf',
                    'externalSource': 'bbbgbhfjge',
                    'externalId': 'igbehcbab',
                },
                'update': {
                    'domain': 'bjgjgibgbf',
                    'externalSource': 'bbbgbhfjge',
                    'externalId': 'igbehcbab',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.CompanyUpdateManyMutationInput,
        where: types.CompanyWhereInput,
    ) -> int:
        """Update multiple Company records

        Parameters
        ----------
        data
            Company data to update the selected Company records to
        where
            Filter to select the Company records to update

        Returns
        -------
        int
            The total number of Company records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Company records
        total = await Company.prisma().update_many(
            data={
                'maxEmployeeSize': 1448521415
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CompanyWhereInput] = None,
        cursor: Optional[types.CompanyWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Company records present in the database

        Parameters
        ----------
        select
            Select the Company fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Company filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CompanyCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Company.prisma().count()

        # results: prisma.types.CompanyCountAggregateOutput
        results = await Company.prisma().count(
            select={
                '_all': True,
                'employeeSizeLink': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.CompanyCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CompanyWhereInput] = None,
        cursor: Optional[types.CompanyWhereUniqueInput] = None,
    ) -> types.CompanyCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.CompanyCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CompanyWhereInput] = None,
        cursor: Optional[types.CompanyWhereUniqueInput] = None,
    ) -> Union[int, types.CompanyCountAggregateOutput]:
        """Count the number of Company records present in the database

        Parameters
        ----------
        select
            Select the Company fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Company filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CompanyCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Company.prisma().count()

        # results: prisma.types.CompanyCountAggregateOutput
        results = await Company.prisma().count(
            select={
                '_all': True,
                'revenue': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.CompanyCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.CompanyWhereInput] = None
    ) -> int:
        """Delete multiple Company records.

        Parameters
        ----------
        where
            Optional Company filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Company records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Company records
        total = await Company.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.CompanyScalarFieldKeys'],
        *,
        where: Optional['types.CompanyWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.CompanyAvgAggregateInput'] = None,
        sum: Optional['types.CompanySumAggregateInput'] = None,
        min: Optional['types.CompanyMinAggregateInput'] = None,
        max: Optional['types.CompanyMaxAggregateInput'] = None,
        having: Optional['types.CompanyScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.CompanyCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.CompanyScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.CompanyScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.CompanyGroupByOutput']:
        """Group Company records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Company fields to group records by
        where
            Company filter to select records
        take
            Limit the maximum number of Company records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.CompanyGroupByOutput]
            A list of dictionaries representing the Company record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Company records by address values
        # and count how many records are in each group
        results = await Company.prisma().group_by(
            ['address'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ProspectActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Prospect]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Prospect.prisma().query_raw(
            'SELECT * FROM Prospect WHERE id = $1',
            'bgcigfahea',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Prospect
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Prospect.prisma().query_first(
            'SELECT * FROM Prospect WHERE salutation = $1',
            'bcejgaggif',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ProspectCreateInput,
        include: Optional[types.ProspectInclude] = None
    ) -> _PrismaModelT:
        """Create a new Prospect record.

        Parameters
        ----------
        data
            Prospect record data
        include
            Specifies which relations should be loaded on the returned Prospect model

        Returns
        -------
        prisma.models.Prospect
            The created Prospect record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Prospect record from just the required fields
        prospect = await Prospect.prisma().create(
            data={
                # data to create a Prospect record
                'id': 'idfjadbcc',
                'companyId': 'hgdhbjhhj',
                'externalSource': 'ecjjjfbae',
                'externalId': 'bhhfibbigf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ProspectCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Prospect records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Prospect record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Prospect.prisma().create_many(
            data=[
                {
                    # data to create a Prospect record
                    'id': 'ijdbeffgg',
                    'companyId': 'jjfeafhfj',
                    'externalSource': 'cbachdgfce',
                    'externalId': 'chbfcacbd',
                },
                {
                    # data to create a Prospect record
                    'id': 'efggddide',
                    'companyId': 'caficfigfb',
                    'externalSource': 'bfidgijfjc',
                    'externalId': 'ihieecagf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ProspectWhereUniqueInput,
        include: Optional[types.ProspectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Prospect record.

        Parameters
        ----------
        where
            Prospect filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Prospect model

        Returns
        -------
        prisma.models.Prospect
            The deleted Prospect record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        prospect = await Prospect.prisma().delete(
            where={
                'id': 'bghfciaafe',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ProspectWhereUniqueInput,
        include: Optional[types.ProspectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Prospect record.

        Parameters
        ----------
        where
            Prospect filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Prospect model

        Returns
        -------
        prisma.models.Prospect
            The found Prospect record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        prospect = await Prospect.prisma().find_unique(
            where={
                'id': 'bgchfhgceh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ProspectWhereUniqueInput,
        include: Optional[types.ProspectInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Prospect record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Prospect filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Prospect model

        Returns
        -------
        prisma.models.Prospect
            The found Prospect record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        prospect = await Prospect.prisma().find_unique_or_raise(
            where={
                'id': 'cafeiaccbc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProspectWhereInput] = None,
        cursor: Optional[types.ProspectWhereUniqueInput] = None,
        include: Optional[types.ProspectInclude] = None,
        order: Optional[Union[types.ProspectOrderByInput, List[types.ProspectOrderByInput]]] = None,
        distinct: Optional[List[types.ProspectScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Prospect records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Prospect records returned
        skip
            Ignore the first N results
        where
            Prospect filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Prospect model
        order
            Order the returned Prospect records by any field
        distinct
            Filter Prospect records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Prospect]
            The list of all Prospect records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Prospect records
        prospects = await Prospect.prisma().find_many(take=10)

        # find the first 5 Prospect records ordered by the firstName field
        prospects = await Prospect.prisma().find_many(
            take=5,
            order={
                'firstName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProspectWhereInput] = None,
        cursor: Optional[types.ProspectWhereUniqueInput] = None,
        include: Optional[types.ProspectInclude] = None,
        order: Optional[Union[types.ProspectOrderByInput, List[types.ProspectOrderByInput]]] = None,
        distinct: Optional[List[types.ProspectScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Prospect record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Prospect filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Prospect model
        order
            Order the returned Prospect records by any field
        distinct
            Filter Prospect records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Prospect
            The first Prospect record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Prospect record ordered by the lastName field
        prospect = await Prospect.prisma().find_first(
            skip=1,
            order={
                'lastName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProspectWhereInput] = None,
        cursor: Optional[types.ProspectWhereUniqueInput] = None,
        include: Optional[types.ProspectInclude] = None,
        order: Optional[Union[types.ProspectOrderByInput, List[types.ProspectOrderByInput]]] = None,
        distinct: Optional[List[types.ProspectScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Prospect record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Prospect filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Prospect model
        order
            Order the returned Prospect records by any field
        distinct
            Filter Prospect records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Prospect
            The first Prospect record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Prospect record ordered by the email field
        prospect = await Prospect.prisma().find_first_or_raise(
            skip=1,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ProspectUpdateInput,
        where: types.ProspectWhereUniqueInput,
        include: Optional[types.ProspectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Prospect record.

        Parameters
        ----------
        data
            Prospect record data specifying what to update
        where
            Prospect filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Prospect model

        Returns
        -------
        prisma.models.Prospect
            The updated Prospect record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        prospect = await Prospect.prisma().update(
            where={
                'id': 'gaddfhfh',
            },
            data={
                # data to update the Prospect record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ProspectWhereUniqueInput,
        data: types.ProspectUpsertInput,
        include: Optional[types.ProspectInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Prospect filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Prospect model

        Returns
        -------
        prisma.models.Prospect
            The created or updated Prospect record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        prospect = await Prospect.prisma().upsert(
            where={
                'id': 'gieegcbeg',
            },
            data={
                'create': {
                    'id': 'gieegcbeg',
                    'companyId': 'caficfigfb',
                    'externalSource': 'bfidgijfjc',
                    'externalId': 'ihieecagf',
                },
                'update': {
                    'companyId': 'caficfigfb',
                    'externalSource': 'bfidgijfjc',
                    'externalId': 'ihieecagf',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ProspectUpdateManyMutationInput,
        where: types.ProspectWhereInput,
    ) -> int:
        """Update multiple Prospect records

        Parameters
        ----------
        data
            Prospect data to update the selected Prospect records to
        where
            Filter to select the Prospect records to update

        Returns
        -------
        int
            The total number of Prospect records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Prospect records
        total = await Prospect.prisma().update_many(
            data={
                'jobTitle': 'bgcffadich'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProspectWhereInput] = None,
        cursor: Optional[types.ProspectWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Prospect records present in the database

        Parameters
        ----------
        select
            Select the Prospect fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Prospect filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProspectCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Prospect.prisma().count()

        # results: prisma.types.ProspectCountAggregateOutput
        results = await Prospect.prisma().count(
            select={
                '_all': True,
                'jobTitleLevel': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ProspectCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProspectWhereInput] = None,
        cursor: Optional[types.ProspectWhereUniqueInput] = None,
    ) -> types.ProspectCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ProspectCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProspectWhereInput] = None,
        cursor: Optional[types.ProspectWhereUniqueInput] = None,
    ) -> Union[int, types.ProspectCountAggregateOutput]:
        """Count the number of Prospect records present in the database

        Parameters
        ----------
        select
            Select the Prospect fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Prospect filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProspectCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Prospect.prisma().count()

        # results: prisma.types.ProspectCountAggregateOutput
        results = await Prospect.prisma().count(
            select={
                '_all': True,
                'department': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ProspectCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ProspectWhereInput] = None
    ) -> int:
        """Delete multiple Prospect records.

        Parameters
        ----------
        where
            Optional Prospect filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Prospect records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Prospect records
        total = await Prospect.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ProspectScalarFieldKeys'],
        *,
        where: Optional['types.ProspectWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ProspectAvgAggregateInput'] = None,
        sum: Optional['types.ProspectSumAggregateInput'] = None,
        min: Optional['types.ProspectMinAggregateInput'] = None,
        max: Optional['types.ProspectMaxAggregateInput'] = None,
        having: Optional['types.ProspectScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ProspectCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ProspectScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ProspectScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ProspectGroupByOutput']:
        """Group Prospect records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Prospect fields to group records by
        where
            Prospect filter to select records
        take
            Limit the maximum number of Prospect records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ProspectGroupByOutput]
            A list of dictionaries representing the Prospect record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Prospect records by jobTitleLink values
        # and count how many records are in each group
        results = await Prospect.prisma().group_by(
            ['jobTitleLink'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await User.prisma().query_raw(
            'SELECT * FROM User WHERE id = $1',
            'fcbichhci',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().query_first(
            'SELECT * FROM User WHERE email = $1',
            'bcggadccgf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = await User.prisma().create(
            data={
                # data to create a User record
                'email': 'jdcfdcgc',
                'password': 'cafdaehjid',
                'firstName': 'gifdddbia',
                'lastName': 'bchehecef',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'email': 'jeijcbhfe',
                    'password': 'bjgejjabff',
                    'firstName': 'bcciijbibg',
                    'lastName': 'cffcachfd',
                },
                {
                    # data to create a User record
                    'email': 'bccdfhdigc',
                    'password': 'febcgjbfj',
                    'firstName': 'bageiegghg',
                    'lastName': 'faidicegb',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().delete(
            where={
                'id': 'bacecgfhbe',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique(
            where={
                'id': 'ihcahiead',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Find a unique User record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique_or_raise(
            where={
                'id': 'biheheiajg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = await User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the password field
        users = await User.prisma().find_many(
            take=5,
            order={
                'password': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the firstName field
        user = await User.prisma().find_first(
            skip=1,
            order={
                'firstName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single User record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the lastName field
        user = await User.prisma().find_first_or_raise(
            skip=1,
            order={
                'lastName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().update(
            where={
                'id': 'jbgijghgb',
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().upsert(
            where={
                'id': 'hgjcghfbi',
            },
            data={
                'create': {
                    'id': 'hgjcghfbi',
                    'email': 'bccdfhdigc',
                    'password': 'febcgjbfj',
                    'firstName': 'bageiegghg',
                    'lastName': 'faidicegb',
                },
                'update': {
                    'email': 'bccdfhdigc',
                    'password': 'febcgjbfj',
                    'firstName': 'bageiegghg',
                    'lastName': 'faidicegb',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = await User.prisma().update_many(
            data={
                'role': enums.UserRole.ADMIN
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'isActive': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'createdAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = await User.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserScalarFieldKeys'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by updatedAt values
        # and count how many records are in each group
        results = await User.prisma().group_by(
            ['updatedAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class MaterializedViewLogActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.MaterializedViewLog]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await MaterializedViewLog.prisma().query_raw(
            'SELECT * FROM MaterializedViewLog WHERE id = $1',
            820312479,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.MaterializedViewLog
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await MaterializedViewLog.prisma().query_first(
            'SELECT * FROM MaterializedViewLog WHERE viewName = $1',
            'jchciaee',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.MaterializedViewLogCreateInput,
        include: Optional[types.MaterializedViewLogInclude] = None
    ) -> _PrismaModelT:
        """Create a new MaterializedViewLog record.

        Parameters
        ----------
        data
            MaterializedViewLog record data
        include
            Specifies which relations should be loaded on the returned MaterializedViewLog model

        Returns
        -------
        prisma.models.MaterializedViewLog
            The created MaterializedViewLog record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a MaterializedViewLog record from just the required fields
        materializedviewlog = await MaterializedViewLog.prisma().create(
            data={
                # data to create a MaterializedViewLog record
                'viewName': 'deeificjd',
                'refreshType': 'bbcbhebbda',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.MaterializedViewLogCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple MaterializedViewLog records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of MaterializedViewLog record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await MaterializedViewLog.prisma().create_many(
            data=[
                {
                    # data to create a MaterializedViewLog record
                    'viewName': 'bejfijgcfb',
                    'refreshType': 'caifcbgii',
                },
                {
                    # data to create a MaterializedViewLog record
                    'viewName': 'igaibbfgj',
                    'refreshType': 'bggajdcbbi',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.MaterializedViewLogWhereUniqueInput,
        include: Optional[types.MaterializedViewLogInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single MaterializedViewLog record.

        Parameters
        ----------
        where
            MaterializedViewLog filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned MaterializedViewLog model

        Returns
        -------
        prisma.models.MaterializedViewLog
            The deleted MaterializedViewLog record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        materializedviewlog = await MaterializedViewLog.prisma().delete(
            where={
                'id': 525761943,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.MaterializedViewLogWhereUniqueInput,
        include: Optional[types.MaterializedViewLogInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique MaterializedViewLog record.

        Parameters
        ----------
        where
            MaterializedViewLog filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned MaterializedViewLog model

        Returns
        -------
        prisma.models.MaterializedViewLog
            The found MaterializedViewLog record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        materializedviewlog = await MaterializedViewLog.prisma().find_unique(
            where={
                'id': 736209796,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.MaterializedViewLogWhereUniqueInput,
        include: Optional[types.MaterializedViewLogInclude] = None
    ) -> _PrismaModelT:
        """Find a unique MaterializedViewLog record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            MaterializedViewLog filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned MaterializedViewLog model

        Returns
        -------
        prisma.models.MaterializedViewLog
            The found MaterializedViewLog record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        materializedviewlog = await MaterializedViewLog.prisma().find_unique_or_raise(
            where={
                'id': 493907821,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaterializedViewLogWhereInput] = None,
        cursor: Optional[types.MaterializedViewLogWhereUniqueInput] = None,
        include: Optional[types.MaterializedViewLogInclude] = None,
        order: Optional[Union[types.MaterializedViewLogOrderByInput, List[types.MaterializedViewLogOrderByInput]]] = None,
        distinct: Optional[List[types.MaterializedViewLogScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple MaterializedViewLog records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of MaterializedViewLog records returned
        skip
            Ignore the first N results
        where
            MaterializedViewLog filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MaterializedViewLog model
        order
            Order the returned MaterializedViewLog records by any field
        distinct
            Filter MaterializedViewLog records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.MaterializedViewLog]
            The list of all MaterializedViewLog records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 MaterializedViewLog records
        materializedviewlogs = await MaterializedViewLog.prisma().find_many(take=10)

        # find the first 5 MaterializedViewLog records ordered by the refreshType field
        materializedviewlogs = await MaterializedViewLog.prisma().find_many(
            take=5,
            order={
                'refreshType': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MaterializedViewLogWhereInput] = None,
        cursor: Optional[types.MaterializedViewLogWhereUniqueInput] = None,
        include: Optional[types.MaterializedViewLogInclude] = None,
        order: Optional[Union[types.MaterializedViewLogOrderByInput, List[types.MaterializedViewLogOrderByInput]]] = None,
        distinct: Optional[List[types.MaterializedViewLogScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single MaterializedViewLog record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            MaterializedViewLog filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MaterializedViewLog model
        order
            Order the returned MaterializedViewLog records by any field
        distinct
            Filter MaterializedViewLog records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.MaterializedViewLog
            The first MaterializedViewLog record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second MaterializedViewLog record ordered by the refreshedAt field
        materializedviewlog = await MaterializedViewLog.prisma().find_first(
            skip=1,
            order={
                'refreshedAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MaterializedViewLogWhereInput] = None,
        cursor: Optional[types.MaterializedViewLogWhereUniqueInput] = None,
        include: Optional[types.MaterializedViewLogInclude] = None,
        order: Optional[Union[types.MaterializedViewLogOrderByInput, List[types.MaterializedViewLogOrderByInput]]] = None,
        distinct: Optional[List[types.MaterializedViewLogScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single MaterializedViewLog record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            MaterializedViewLog filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MaterializedViewLog model
        order
            Order the returned MaterializedViewLog records by any field
        distinct
            Filter MaterializedViewLog records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.MaterializedViewLog
            The first MaterializedViewLog record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second MaterializedViewLog record ordered by the durationMs field
        materializedviewlog = await MaterializedViewLog.prisma().find_first_or_raise(
            skip=1,
            order={
                'durationMs': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.MaterializedViewLogUpdateInput,
        where: types.MaterializedViewLogWhereUniqueInput,
        include: Optional[types.MaterializedViewLogInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single MaterializedViewLog record.

        Parameters
        ----------
        data
            MaterializedViewLog record data specifying what to update
        where
            MaterializedViewLog filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned MaterializedViewLog model

        Returns
        -------
        prisma.models.MaterializedViewLog
            The updated MaterializedViewLog record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        materializedviewlog = await MaterializedViewLog.prisma().update(
            where={
                'id': 639686562,
            },
            data={
                # data to update the MaterializedViewLog record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.MaterializedViewLogWhereUniqueInput,
        data: types.MaterializedViewLogUpsertInput,
        include: Optional[types.MaterializedViewLogInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            MaterializedViewLog filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned MaterializedViewLog model

        Returns
        -------
        prisma.models.MaterializedViewLog
            The created or updated MaterializedViewLog record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        materializedviewlog = await MaterializedViewLog.prisma().upsert(
            where={
                'id': 654007347,
            },
            data={
                'create': {
                    'id': 654007347,
                    'viewName': 'igaibbfgj',
                    'refreshType': 'bggajdcbbi',
                },
                'update': {
                    'viewName': 'igaibbfgj',
                    'refreshType': 'bggajdcbbi',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.MaterializedViewLogUpdateManyMutationInput,
        where: types.MaterializedViewLogWhereInput,
    ) -> int:
        """Update multiple MaterializedViewLog records

        Parameters
        ----------
        data
            MaterializedViewLog data to update the selected MaterializedViewLog records to
        where
            Filter to select the MaterializedViewLog records to update

        Returns
        -------
        int
            The total number of MaterializedViewLog records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all MaterializedViewLog records
        total = await MaterializedViewLog.prisma().update_many(
            data={
                'recordsProcessed': 1905261552
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaterializedViewLogWhereInput] = None,
        cursor: Optional[types.MaterializedViewLogWhereUniqueInput] = None,
    ) -> int:
        """Count the number of MaterializedViewLog records present in the database

        Parameters
        ----------
        select
            Select the MaterializedViewLog fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            MaterializedViewLog filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MaterializedViewLogCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await MaterializedViewLog.prisma().count()

        # results: prisma.types.MaterializedViewLogCountAggregateOutput
        results = await MaterializedViewLog.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.MaterializedViewLogCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaterializedViewLogWhereInput] = None,
        cursor: Optional[types.MaterializedViewLogWhereUniqueInput] = None,
    ) -> types.MaterializedViewLogCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.MaterializedViewLogCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaterializedViewLogWhereInput] = None,
        cursor: Optional[types.MaterializedViewLogWhereUniqueInput] = None,
    ) -> Union[int, types.MaterializedViewLogCountAggregateOutput]:
        """Count the number of MaterializedViewLog records present in the database

        Parameters
        ----------
        select
            Select the MaterializedViewLog fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            MaterializedViewLog filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MaterializedViewLogCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await MaterializedViewLog.prisma().count()

        # results: prisma.types.MaterializedViewLogCountAggregateOutput
        results = await MaterializedViewLog.prisma().count(
            select={
                '_all': True,
                'viewName': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.MaterializedViewLogCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.MaterializedViewLogWhereInput] = None
    ) -> int:
        """Delete multiple MaterializedViewLog records.

        Parameters
        ----------
        where
            Optional MaterializedViewLog filter to find the records to be deleted

        Returns
        -------
        int
            The total number of MaterializedViewLog records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all MaterializedViewLog records
        total = await MaterializedViewLog.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.MaterializedViewLogScalarFieldKeys'],
        *,
        where: Optional['types.MaterializedViewLogWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.MaterializedViewLogAvgAggregateInput'] = None,
        sum: Optional['types.MaterializedViewLogSumAggregateInput'] = None,
        min: Optional['types.MaterializedViewLogMinAggregateInput'] = None,
        max: Optional['types.MaterializedViewLogMaxAggregateInput'] = None,
        having: Optional['types.MaterializedViewLogScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.MaterializedViewLogCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.MaterializedViewLogScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.MaterializedViewLogScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.MaterializedViewLogGroupByOutput']:
        """Group MaterializedViewLog records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar MaterializedViewLog fields to group records by
        where
            MaterializedViewLog filter to select records
        take
            Limit the maximum number of MaterializedViewLog records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MaterializedViewLogGroupByOutput]
            A list of dictionaries representing the MaterializedViewLog record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group MaterializedViewLog records by refreshType values
        # and count how many records are in each group
        results = await MaterializedViewLog.prisma().group_by(
            ['refreshType'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class MaterializedViewErrorActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.MaterializedViewError]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await MaterializedViewError.prisma().query_raw(
            'SELECT * FROM MaterializedViewError WHERE id = $1',
            78746985,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.MaterializedViewError
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await MaterializedViewError.prisma().query_first(
            'SELECT * FROM MaterializedViewError WHERE viewName = $1',
            'bdjidcidac',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.MaterializedViewErrorCreateInput,
        include: Optional[types.MaterializedViewErrorInclude] = None
    ) -> _PrismaModelT:
        """Create a new MaterializedViewError record.

        Parameters
        ----------
        data
            MaterializedViewError record data
        include
            Specifies which relations should be loaded on the returned MaterializedViewError model

        Returns
        -------
        prisma.models.MaterializedViewError
            The created MaterializedViewError record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a MaterializedViewError record from just the required fields
        materializedviewerror = await MaterializedViewError.prisma().create(
            data={
                # data to create a MaterializedViewError record
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.MaterializedViewErrorCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple MaterializedViewError records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of MaterializedViewError record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await MaterializedViewError.prisma().create_many(
            data=[
                {
                    # data to create a MaterializedViewError record
                },
                {
                    # data to create a MaterializedViewError record
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.MaterializedViewErrorWhereUniqueInput,
        include: Optional[types.MaterializedViewErrorInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single MaterializedViewError record.

        Parameters
        ----------
        where
            MaterializedViewError filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned MaterializedViewError model

        Returns
        -------
        prisma.models.MaterializedViewError
            The deleted MaterializedViewError record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        materializedviewerror = await MaterializedViewError.prisma().delete(
            where={
                'id': 856000655,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.MaterializedViewErrorWhereUniqueInput,
        include: Optional[types.MaterializedViewErrorInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique MaterializedViewError record.

        Parameters
        ----------
        where
            MaterializedViewError filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned MaterializedViewError model

        Returns
        -------
        prisma.models.MaterializedViewError
            The found MaterializedViewError record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        materializedviewerror = await MaterializedViewError.prisma().find_unique(
            where={
                'id': 1452336924,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.MaterializedViewErrorWhereUniqueInput,
        include: Optional[types.MaterializedViewErrorInclude] = None
    ) -> _PrismaModelT:
        """Find a unique MaterializedViewError record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            MaterializedViewError filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned MaterializedViewError model

        Returns
        -------
        prisma.models.MaterializedViewError
            The found MaterializedViewError record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        materializedviewerror = await MaterializedViewError.prisma().find_unique_or_raise(
            where={
                'id': 1573199653,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaterializedViewErrorWhereInput] = None,
        cursor: Optional[types.MaterializedViewErrorWhereUniqueInput] = None,
        include: Optional[types.MaterializedViewErrorInclude] = None,
        order: Optional[Union[types.MaterializedViewErrorOrderByInput, List[types.MaterializedViewErrorOrderByInput]]] = None,
        distinct: Optional[List[types.MaterializedViewErrorScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple MaterializedViewError records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of MaterializedViewError records returned
        skip
            Ignore the first N results
        where
            MaterializedViewError filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MaterializedViewError model
        order
            Order the returned MaterializedViewError records by any field
        distinct
            Filter MaterializedViewError records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.MaterializedViewError]
            The list of all MaterializedViewError records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 MaterializedViewError records
        materializedviewerrors = await MaterializedViewError.prisma().find_many(take=10)

        # find the first 5 MaterializedViewError records ordered by the errorMessage field
        materializedviewerrors = await MaterializedViewError.prisma().find_many(
            take=5,
            order={
                'errorMessage': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MaterializedViewErrorWhereInput] = None,
        cursor: Optional[types.MaterializedViewErrorWhereUniqueInput] = None,
        include: Optional[types.MaterializedViewErrorInclude] = None,
        order: Optional[Union[types.MaterializedViewErrorOrderByInput, List[types.MaterializedViewErrorOrderByInput]]] = None,
        distinct: Optional[List[types.MaterializedViewErrorScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single MaterializedViewError record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            MaterializedViewError filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MaterializedViewError model
        order
            Order the returned MaterializedViewError records by any field
        distinct
            Filter MaterializedViewError records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.MaterializedViewError
            The first MaterializedViewError record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second MaterializedViewError record ordered by the occurredAt field
        materializedviewerror = await MaterializedViewError.prisma().find_first(
            skip=1,
            order={
                'occurredAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MaterializedViewErrorWhereInput] = None,
        cursor: Optional[types.MaterializedViewErrorWhereUniqueInput] = None,
        include: Optional[types.MaterializedViewErrorInclude] = None,
        order: Optional[Union[types.MaterializedViewErrorOrderByInput, List[types.MaterializedViewErrorOrderByInput]]] = None,
        distinct: Optional[List[types.MaterializedViewErrorScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single MaterializedViewError record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            MaterializedViewError filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MaterializedViewError model
        order
            Order the returned MaterializedViewError records by any field
        distinct
            Filter MaterializedViewError records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.MaterializedViewError
            The first MaterializedViewError record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second MaterializedViewError record ordered by the id field
        materializedviewerror = await MaterializedViewError.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.MaterializedViewErrorUpdateInput,
        where: types.MaterializedViewErrorWhereUniqueInput,
        include: Optional[types.MaterializedViewErrorInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single MaterializedViewError record.

        Parameters
        ----------
        data
            MaterializedViewError record data specifying what to update
        where
            MaterializedViewError filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned MaterializedViewError model

        Returns
        -------
        prisma.models.MaterializedViewError
            The updated MaterializedViewError record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        materializedviewerror = await MaterializedViewError.prisma().update(
            where={
                'id': 2013903098,
            },
            data={
                # data to update the MaterializedViewError record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.MaterializedViewErrorWhereUniqueInput,
        data: types.MaterializedViewErrorUpsertInput,
        include: Optional[types.MaterializedViewErrorInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            MaterializedViewError filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned MaterializedViewError model

        Returns
        -------
        prisma.models.MaterializedViewError
            The created or updated MaterializedViewError record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        materializedviewerror = await MaterializedViewError.prisma().upsert(
            where={
                'id': 500965035,
            },
            data={
                'create': {
                    'id': 500965035,
                },
                'update': {
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.MaterializedViewErrorUpdateManyMutationInput,
        where: types.MaterializedViewErrorWhereInput,
    ) -> int:
        """Update multiple MaterializedViewError records

        Parameters
        ----------
        data
            MaterializedViewError data to update the selected MaterializedViewError records to
        where
            Filter to select the MaterializedViewError records to update

        Returns
        -------
        int
            The total number of MaterializedViewError records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all MaterializedViewError records
        total = await MaterializedViewError.prisma().update_many(
            data={
                'viewName': 'biaagcedjc'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaterializedViewErrorWhereInput] = None,
        cursor: Optional[types.MaterializedViewErrorWhereUniqueInput] = None,
    ) -> int:
        """Count the number of MaterializedViewError records present in the database

        Parameters
        ----------
        select
            Select the MaterializedViewError fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            MaterializedViewError filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MaterializedViewErrorCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await MaterializedViewError.prisma().count()

        # results: prisma.types.MaterializedViewErrorCountAggregateOutput
        results = await MaterializedViewError.prisma().count(
            select={
                '_all': True,
                'errorMessage': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.MaterializedViewErrorCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaterializedViewErrorWhereInput] = None,
        cursor: Optional[types.MaterializedViewErrorWhereUniqueInput] = None,
    ) -> types.MaterializedViewErrorCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.MaterializedViewErrorCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaterializedViewErrorWhereInput] = None,
        cursor: Optional[types.MaterializedViewErrorWhereUniqueInput] = None,
    ) -> Union[int, types.MaterializedViewErrorCountAggregateOutput]:
        """Count the number of MaterializedViewError records present in the database

        Parameters
        ----------
        select
            Select the MaterializedViewError fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            MaterializedViewError filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MaterializedViewErrorCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await MaterializedViewError.prisma().count()

        # results: prisma.types.MaterializedViewErrorCountAggregateOutput
        results = await MaterializedViewError.prisma().count(
            select={
                '_all': True,
                'occurredAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.MaterializedViewErrorCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.MaterializedViewErrorWhereInput] = None
    ) -> int:
        """Delete multiple MaterializedViewError records.

        Parameters
        ----------
        where
            Optional MaterializedViewError filter to find the records to be deleted

        Returns
        -------
        int
            The total number of MaterializedViewError records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all MaterializedViewError records
        total = await MaterializedViewError.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.MaterializedViewErrorScalarFieldKeys'],
        *,
        where: Optional['types.MaterializedViewErrorWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.MaterializedViewErrorAvgAggregateInput'] = None,
        sum: Optional['types.MaterializedViewErrorSumAggregateInput'] = None,
        min: Optional['types.MaterializedViewErrorMinAggregateInput'] = None,
        max: Optional['types.MaterializedViewErrorMaxAggregateInput'] = None,
        having: Optional['types.MaterializedViewErrorScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.MaterializedViewErrorCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.MaterializedViewErrorScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.MaterializedViewErrorScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.MaterializedViewErrorGroupByOutput']:
        """Group MaterializedViewError records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar MaterializedViewError fields to group records by
        where
            MaterializedViewError filter to select records
        take
            Limit the maximum number of MaterializedViewError records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MaterializedViewErrorGroupByOutput]
            A list of dictionaries representing the MaterializedViewError record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group MaterializedViewError records by id values
        # and count how many records are in each group
        results = await MaterializedViewError.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models