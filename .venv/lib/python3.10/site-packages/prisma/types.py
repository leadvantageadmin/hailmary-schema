# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _UserRoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.UserRole']]


class _UserRoleListFilterHasInput(TypedDict):
    has: 'enums.UserRole'


class _UserRoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.UserRole']


class _UserRoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.UserRole']


class _UserRoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


UserRoleListFilter = Union[
    _UserRoleListFilterHasInput,
    _UserRoleListFilterEqualsInput,
    _UserRoleListFilterHasSomeInput,
    _UserRoleListFilterIsEmptyInput,
    _UserRoleListFilterHasEveryInput,
]


class _UserRoleListUpdateSet(TypedDict):
    set: List['enums.UserRole']


class _UserRoleListUpdatePush(TypedDict):
    push: List['enums.UserRole']


UserRoleListUpdate = Union[
    List['enums.UserRole'],
    _UserRoleListUpdateSet,
    _UserRoleListUpdatePush,
]


# Customer types

class CustomerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Customer create method"""
    id: _str
    salutation: Optional[_str]
    firstName: Optional[_str]
    lastName: Optional[_str]
    email: Optional[_str]
    company: Optional[_str]
    address: Optional[_str]
    city: Optional[_str]
    state: Optional[_str]
    country: Optional[_str]
    zipCode: Optional[_str]
    phone: Optional[_str]
    mobilePhone: Optional[_str]
    industry: Optional[_str]
    jobTitleLevel: Optional[_str]
    jobTitle: Optional[_str]
    department: Optional[_str]
    minEmployeeSize: Optional[_int]
    maxEmployeeSize: Optional[_int]
    jobTitleLink: Optional[_str]
    employeeSizeLink: Optional[_str]
    revenue: Optional[_int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CustomerCreateInput(CustomerOptionalCreateInput):
    """Required arguments to the Customer create method"""
    externalSource: _str
    externalId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CustomerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Customer create method, without relations"""
    id: _str
    salutation: Optional[_str]
    firstName: Optional[_str]
    lastName: Optional[_str]
    email: Optional[_str]
    company: Optional[_str]
    address: Optional[_str]
    city: Optional[_str]
    state: Optional[_str]
    country: Optional[_str]
    zipCode: Optional[_str]
    phone: Optional[_str]
    mobilePhone: Optional[_str]
    industry: Optional[_str]
    jobTitleLevel: Optional[_str]
    jobTitle: Optional[_str]
    department: Optional[_str]
    minEmployeeSize: Optional[_int]
    maxEmployeeSize: Optional[_int]
    jobTitleLink: Optional[_str]
    employeeSizeLink: Optional[_str]
    revenue: Optional[_int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CustomerCreateWithoutRelationsInput(CustomerOptionalCreateWithoutRelationsInput):
    """Required arguments to the Customer create method, without relations"""
    externalSource: _str
    externalId: _str

class CustomerConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CustomerCreateWithoutRelationsInput'
    where: 'CustomerWhereUniqueInput'

class CustomerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CustomerCreateWithoutRelationsInput'
    connect: 'CustomerWhereUniqueInput'
    connect_or_create: 'CustomerConnectOrCreateWithoutRelationsInput'


class CustomerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CustomerCreateWithoutRelationsInput', List['CustomerCreateWithoutRelationsInput']]
    connect: Union['CustomerWhereUniqueInput', List['CustomerWhereUniqueInput']]
    connect_or_create: Union['CustomerConnectOrCreateWithoutRelationsInput', List['CustomerConnectOrCreateWithoutRelationsInput']]

_CustomerWhereUnique_id_Input = TypedDict(
    '_CustomerWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_CustomerCompoundexternalSource_externalIdKeyInner = TypedDict(
    '_CustomerCompoundexternalSource_externalIdKeyInner',
    {
        'externalSource': '_str',
        'externalId': '_str',
    },
    total=True
)

_CustomerCompoundexternalSource_externalIdKey = TypedDict(
    '_CustomerCompoundexternalSource_externalIdKey',
    {
        'externalSource_externalId': '_CustomerCompoundexternalSource_externalIdKeyInner',
    },
    total=True
)

CustomerWhereUniqueInput = Union[
    '_CustomerWhereUnique_id_Input',
    '_CustomerCompoundexternalSource_externalIdKey',
]


class CustomerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    salutation: Optional[_str]
    firstName: Optional[_str]
    lastName: Optional[_str]
    email: Optional[_str]
    company: Optional[_str]
    address: Optional[_str]
    city: Optional[_str]
    state: Optional[_str]
    country: Optional[_str]
    zipCode: Optional[_str]
    phone: Optional[_str]
    mobilePhone: Optional[_str]
    industry: Optional[_str]
    jobTitleLevel: Optional[_str]
    jobTitle: Optional[_str]
    department: Optional[_str]
    minEmployeeSize: Optional[Union[AtomicIntInput, _int]]
    maxEmployeeSize: Optional[Union[AtomicIntInput, _int]]
    jobTitleLink: Optional[_str]
    employeeSizeLink: Optional[_str]
    revenue: Optional[Union[AtomicBigIntInput, _int]]
    externalSource: _str
    externalId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CustomerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    salutation: Optional[_str]
    firstName: Optional[_str]
    lastName: Optional[_str]
    email: Optional[_str]
    company: Optional[_str]
    address: Optional[_str]
    city: Optional[_str]
    state: Optional[_str]
    country: Optional[_str]
    zipCode: Optional[_str]
    phone: Optional[_str]
    mobilePhone: Optional[_str]
    industry: Optional[_str]
    jobTitleLevel: Optional[_str]
    jobTitle: Optional[_str]
    department: Optional[_str]
    minEmployeeSize: Optional[Union[AtomicIntInput, _int]]
    maxEmployeeSize: Optional[Union[AtomicIntInput, _int]]
    jobTitleLink: Optional[_str]
    employeeSizeLink: Optional[_str]
    revenue: Optional[Union[AtomicBigIntInput, _int]]
    externalSource: _str
    externalId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CustomerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CustomerCreateWithoutRelationsInput']
    connect: List['CustomerWhereUniqueInput']
    connect_or_create: List['CustomerConnectOrCreateWithoutRelationsInput']
    set: List['CustomerWhereUniqueInput']
    disconnect: List['CustomerWhereUniqueInput']
    delete: List['CustomerWhereUniqueInput']

    # TODO
    # update: List['CustomerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CustomerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CustomerScalarWhereInput']
    # upsert: List['CustomerUpserteWithWhereUniqueWithoutRelationsInput']


class CustomerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CustomerCreateWithoutRelationsInput'
    connect: 'CustomerWhereUniqueInput'
    connect_or_create: 'CustomerConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CustomerUpdateInput'
    # upsert: 'CustomerUpsertWithoutRelationsInput'


class CustomerUpsertInput(TypedDict):
    create: 'CustomerCreateInput'
    update: 'CustomerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Customer_id_OrderByInput = TypedDict(
    '_Customer_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Customer_salutation_OrderByInput = TypedDict(
    '_Customer_salutation_OrderByInput',
    {
        'salutation': 'SortOrder',
    },
    total=True
)

_Customer_firstName_OrderByInput = TypedDict(
    '_Customer_firstName_OrderByInput',
    {
        'firstName': 'SortOrder',
    },
    total=True
)

_Customer_lastName_OrderByInput = TypedDict(
    '_Customer_lastName_OrderByInput',
    {
        'lastName': 'SortOrder',
    },
    total=True
)

_Customer_email_OrderByInput = TypedDict(
    '_Customer_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Customer_company_OrderByInput = TypedDict(
    '_Customer_company_OrderByInput',
    {
        'company': 'SortOrder',
    },
    total=True
)

_Customer_address_OrderByInput = TypedDict(
    '_Customer_address_OrderByInput',
    {
        'address': 'SortOrder',
    },
    total=True
)

_Customer_city_OrderByInput = TypedDict(
    '_Customer_city_OrderByInput',
    {
        'city': 'SortOrder',
    },
    total=True
)

_Customer_state_OrderByInput = TypedDict(
    '_Customer_state_OrderByInput',
    {
        'state': 'SortOrder',
    },
    total=True
)

_Customer_country_OrderByInput = TypedDict(
    '_Customer_country_OrderByInput',
    {
        'country': 'SortOrder',
    },
    total=True
)

_Customer_zipCode_OrderByInput = TypedDict(
    '_Customer_zipCode_OrderByInput',
    {
        'zipCode': 'SortOrder',
    },
    total=True
)

_Customer_phone_OrderByInput = TypedDict(
    '_Customer_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_Customer_mobilePhone_OrderByInput = TypedDict(
    '_Customer_mobilePhone_OrderByInput',
    {
        'mobilePhone': 'SortOrder',
    },
    total=True
)

_Customer_industry_OrderByInput = TypedDict(
    '_Customer_industry_OrderByInput',
    {
        'industry': 'SortOrder',
    },
    total=True
)

_Customer_jobTitleLevel_OrderByInput = TypedDict(
    '_Customer_jobTitleLevel_OrderByInput',
    {
        'jobTitleLevel': 'SortOrder',
    },
    total=True
)

_Customer_jobTitle_OrderByInput = TypedDict(
    '_Customer_jobTitle_OrderByInput',
    {
        'jobTitle': 'SortOrder',
    },
    total=True
)

_Customer_department_OrderByInput = TypedDict(
    '_Customer_department_OrderByInput',
    {
        'department': 'SortOrder',
    },
    total=True
)

_Customer_minEmployeeSize_OrderByInput = TypedDict(
    '_Customer_minEmployeeSize_OrderByInput',
    {
        'minEmployeeSize': 'SortOrder',
    },
    total=True
)

_Customer_maxEmployeeSize_OrderByInput = TypedDict(
    '_Customer_maxEmployeeSize_OrderByInput',
    {
        'maxEmployeeSize': 'SortOrder',
    },
    total=True
)

_Customer_jobTitleLink_OrderByInput = TypedDict(
    '_Customer_jobTitleLink_OrderByInput',
    {
        'jobTitleLink': 'SortOrder',
    },
    total=True
)

_Customer_employeeSizeLink_OrderByInput = TypedDict(
    '_Customer_employeeSizeLink_OrderByInput',
    {
        'employeeSizeLink': 'SortOrder',
    },
    total=True
)

_Customer_revenue_OrderByInput = TypedDict(
    '_Customer_revenue_OrderByInput',
    {
        'revenue': 'SortOrder',
    },
    total=True
)

_Customer_externalSource_OrderByInput = TypedDict(
    '_Customer_externalSource_OrderByInput',
    {
        'externalSource': 'SortOrder',
    },
    total=True
)

_Customer_externalId_OrderByInput = TypedDict(
    '_Customer_externalId_OrderByInput',
    {
        'externalId': 'SortOrder',
    },
    total=True
)

_Customer_createdAt_OrderByInput = TypedDict(
    '_Customer_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Customer_updatedAt_OrderByInput = TypedDict(
    '_Customer_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Customer_RelevanceInner = TypedDict(
    '_Customer_RelevanceInner',
    {
        'fields': 'List[CustomerScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Customer_RelevanceOrderByInput = TypedDict(
    '_Customer_RelevanceOrderByInput',
    {
        '_relevance': '_Customer_RelevanceInner',
    },
    total=True
)

CustomerOrderByInput = Union[
    '_Customer_id_OrderByInput',
    '_Customer_salutation_OrderByInput',
    '_Customer_firstName_OrderByInput',
    '_Customer_lastName_OrderByInput',
    '_Customer_email_OrderByInput',
    '_Customer_company_OrderByInput',
    '_Customer_address_OrderByInput',
    '_Customer_city_OrderByInput',
    '_Customer_state_OrderByInput',
    '_Customer_country_OrderByInput',
    '_Customer_zipCode_OrderByInput',
    '_Customer_phone_OrderByInput',
    '_Customer_mobilePhone_OrderByInput',
    '_Customer_industry_OrderByInput',
    '_Customer_jobTitleLevel_OrderByInput',
    '_Customer_jobTitle_OrderByInput',
    '_Customer_department_OrderByInput',
    '_Customer_minEmployeeSize_OrderByInput',
    '_Customer_maxEmployeeSize_OrderByInput',
    '_Customer_jobTitleLink_OrderByInput',
    '_Customer_employeeSizeLink_OrderByInput',
    '_Customer_revenue_OrderByInput',
    '_Customer_externalSource_OrderByInput',
    '_Customer_externalId_OrderByInput',
    '_Customer_createdAt_OrderByInput',
    '_Customer_updatedAt_OrderByInput',
    '_Customer_RelevanceOrderByInput',
]



# recursive Customer types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CustomerRelationFilter = TypedDict(
    'CustomerRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CustomerListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CustomerInclude(TypedDict, total=False):
    """Customer relational arguments"""


    

class CustomerIncludeFromCustomer(TypedDict, total=False):
    """Relational arguments for Customer"""


class CustomerIncludeFromCustomerRecursive1(TypedDict, total=False):
    """Relational arguments for Customer"""


class CustomerIncludeFromCustomerRecursive2(TypedDict, total=False):
    """Relational arguments for Customer"""


class CustomerIncludeFromCustomerRecursive3(TypedDict, total=False):
    """Relational arguments for Customer"""


class CustomerIncludeFromCustomerRecursive4(TypedDict, total=False):
    """Relational arguments for Customer"""

    

class CustomerArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'CustomerIncludeFromCustomerRecursive1'


class CustomerArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'CustomerIncludeFromCustomerRecursive2'


class CustomerArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'CustomerIncludeFromCustomerRecursive3'


class CustomerArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'CustomerIncludeFromCustomerRecursive4'


class CustomerArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    
    

class FindManyCustomerArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive1'


class FindManyCustomerArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive2'


class FindManyCustomerArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive3'


class FindManyCustomerArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive4'


class FindManyCustomerArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    
    

class CompanyIncludeFromCustomer(TypedDict, total=False):
    """Relational arguments for Customer"""
    prospects: Union[bool, 'FindManyProspectArgsFromCustomerRecursive1']


class CompanyIncludeFromCustomerRecursive1(TypedDict, total=False):
    """Relational arguments for Customer"""
    prospects: Union[bool, 'FindManyProspectArgsFromCustomerRecursive2']


class CompanyIncludeFromCustomerRecursive2(TypedDict, total=False):
    """Relational arguments for Customer"""
    prospects: Union[bool, 'FindManyProspectArgsFromCustomerRecursive3']


class CompanyIncludeFromCustomerRecursive3(TypedDict, total=False):
    """Relational arguments for Customer"""
    prospects: Union[bool, 'FindManyProspectArgsFromCustomerRecursive4']


class CompanyIncludeFromCustomerRecursive4(TypedDict, total=False):
    """Relational arguments for Customer"""

    

class CompanyArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    
    

class FindManyCompanyArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class ProspectIncludeFromCustomer(TypedDict, total=False):
    """Relational arguments for Customer"""
    company: Union[bool, 'CompanyArgsFromCustomerRecursive1']


class ProspectIncludeFromCustomerRecursive1(TypedDict, total=False):
    """Relational arguments for Customer"""
    company: Union[bool, 'CompanyArgsFromCustomerRecursive2']


class ProspectIncludeFromCustomerRecursive2(TypedDict, total=False):
    """Relational arguments for Customer"""
    company: Union[bool, 'CompanyArgsFromCustomerRecursive3']


class ProspectIncludeFromCustomerRecursive3(TypedDict, total=False):
    """Relational arguments for Customer"""
    company: Union[bool, 'CompanyArgsFromCustomerRecursive4']


class ProspectIncludeFromCustomerRecursive4(TypedDict, total=False):
    """Relational arguments for Customer"""

    

class ProspectArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'ProspectIncludeFromProspectRecursive1'


class ProspectArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'ProspectIncludeFromProspectRecursive2'


class ProspectArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'ProspectIncludeFromProspectRecursive3'


class ProspectArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'ProspectIncludeFromProspectRecursive4'


class ProspectArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    
    

class FindManyProspectArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive1'


class FindManyProspectArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive2'


class FindManyProspectArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive3'


class FindManyProspectArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive4'


class FindManyProspectArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    
    

class UserIncludeFromCustomer(TypedDict, total=False):
    """Relational arguments for Customer"""


class UserIncludeFromCustomerRecursive1(TypedDict, total=False):
    """Relational arguments for Customer"""


class UserIncludeFromCustomerRecursive2(TypedDict, total=False):
    """Relational arguments for Customer"""


class UserIncludeFromCustomerRecursive3(TypedDict, total=False):
    """Relational arguments for Customer"""


class UserIncludeFromCustomerRecursive4(TypedDict, total=False):
    """Relational arguments for Customer"""

    

class UserArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    
    

class FindManyUserArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class MaterializedViewLogIncludeFromCustomer(TypedDict, total=False):
    """Relational arguments for Customer"""


class MaterializedViewLogIncludeFromCustomerRecursive1(TypedDict, total=False):
    """Relational arguments for Customer"""


class MaterializedViewLogIncludeFromCustomerRecursive2(TypedDict, total=False):
    """Relational arguments for Customer"""


class MaterializedViewLogIncludeFromCustomerRecursive3(TypedDict, total=False):
    """Relational arguments for Customer"""


class MaterializedViewLogIncludeFromCustomerRecursive4(TypedDict, total=False):
    """Relational arguments for Customer"""

    

class MaterializedViewLogArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive1'


class MaterializedViewLogArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive2'


class MaterializedViewLogArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive3'


class MaterializedViewLogArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive4'


class MaterializedViewLogArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    
    

class FindManyMaterializedViewLogArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive1'


class FindManyMaterializedViewLogArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive2'


class FindManyMaterializedViewLogArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive3'


class FindManyMaterializedViewLogArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive4'


class FindManyMaterializedViewLogArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    
    

class MaterializedViewErrorIncludeFromCustomer(TypedDict, total=False):
    """Relational arguments for Customer"""


class MaterializedViewErrorIncludeFromCustomerRecursive1(TypedDict, total=False):
    """Relational arguments for Customer"""


class MaterializedViewErrorIncludeFromCustomerRecursive2(TypedDict, total=False):
    """Relational arguments for Customer"""


class MaterializedViewErrorIncludeFromCustomerRecursive3(TypedDict, total=False):
    """Relational arguments for Customer"""


class MaterializedViewErrorIncludeFromCustomerRecursive4(TypedDict, total=False):
    """Relational arguments for Customer"""

    

class MaterializedViewErrorArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1'


class MaterializedViewErrorArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2'


class MaterializedViewErrorArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3'


class MaterializedViewErrorArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4'


class MaterializedViewErrorArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    
    

class FindManyMaterializedViewErrorArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1'


class FindManyMaterializedViewErrorArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2'


class FindManyMaterializedViewErrorArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3'


class FindManyMaterializedViewErrorArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4'


class FindManyMaterializedViewErrorArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    


FindManyCustomerArgs = FindManyCustomerArgsFromCustomer
FindFirstCustomerArgs = FindManyCustomerArgsFromCustomer


    

class CustomerWhereInput(TypedDict, total=False):
    """Customer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    salutation: Union[None, _str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    company: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    industry: Union[None, _str, 'types.StringFilter']
    jobTitleLevel: Union[None, _str, 'types.StringFilter']
    jobTitle: Union[None, _str, 'types.StringFilter']
    department: Union[None, _str, 'types.StringFilter']
    minEmployeeSize: Union[None, _int, 'types.IntFilter']
    maxEmployeeSize: Union[None, _int, 'types.IntFilter']
    jobTitleLink: Union[None, _str, 'types.StringFilter']
    employeeSizeLink: Union[None, _str, 'types.StringFilter']
    revenue: Union[None, _int, 'types.BigIntFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['CustomerWhereInputRecursive1', List['CustomerWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CustomerWhereInputRecursive1']
    OR: List['CustomerWhereInputRecursive1']
    NOT: List['CustomerWhereInputRecursive1']


class CustomerWhereInputRecursive1(TypedDict, total=False):
    """Customer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    salutation: Union[None, _str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    company: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    industry: Union[None, _str, 'types.StringFilter']
    jobTitleLevel: Union[None, _str, 'types.StringFilter']
    jobTitle: Union[None, _str, 'types.StringFilter']
    department: Union[None, _str, 'types.StringFilter']
    minEmployeeSize: Union[None, _int, 'types.IntFilter']
    maxEmployeeSize: Union[None, _int, 'types.IntFilter']
    jobTitleLink: Union[None, _str, 'types.StringFilter']
    employeeSizeLink: Union[None, _str, 'types.StringFilter']
    revenue: Union[None, _int, 'types.BigIntFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['CustomerWhereInputRecursive2', List['CustomerWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CustomerWhereInputRecursive2']
    OR: List['CustomerWhereInputRecursive2']
    NOT: List['CustomerWhereInputRecursive2']


class CustomerWhereInputRecursive2(TypedDict, total=False):
    """Customer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    salutation: Union[None, _str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    company: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    industry: Union[None, _str, 'types.StringFilter']
    jobTitleLevel: Union[None, _str, 'types.StringFilter']
    jobTitle: Union[None, _str, 'types.StringFilter']
    department: Union[None, _str, 'types.StringFilter']
    minEmployeeSize: Union[None, _int, 'types.IntFilter']
    maxEmployeeSize: Union[None, _int, 'types.IntFilter']
    jobTitleLink: Union[None, _str, 'types.StringFilter']
    employeeSizeLink: Union[None, _str, 'types.StringFilter']
    revenue: Union[None, _int, 'types.BigIntFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['CustomerWhereInputRecursive3', List['CustomerWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CustomerWhereInputRecursive3']
    OR: List['CustomerWhereInputRecursive3']
    NOT: List['CustomerWhereInputRecursive3']


class CustomerWhereInputRecursive3(TypedDict, total=False):
    """Customer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    salutation: Union[None, _str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    company: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    industry: Union[None, _str, 'types.StringFilter']
    jobTitleLevel: Union[None, _str, 'types.StringFilter']
    jobTitle: Union[None, _str, 'types.StringFilter']
    department: Union[None, _str, 'types.StringFilter']
    minEmployeeSize: Union[None, _int, 'types.IntFilter']
    maxEmployeeSize: Union[None, _int, 'types.IntFilter']
    jobTitleLink: Union[None, _str, 'types.StringFilter']
    employeeSizeLink: Union[None, _str, 'types.StringFilter']
    revenue: Union[None, _int, 'types.BigIntFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['CustomerWhereInputRecursive4', List['CustomerWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CustomerWhereInputRecursive4']
    OR: List['CustomerWhereInputRecursive4']
    NOT: List['CustomerWhereInputRecursive4']


class CustomerWhereInputRecursive4(TypedDict, total=False):
    """Customer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    salutation: Union[None, _str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    company: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    industry: Union[None, _str, 'types.StringFilter']
    jobTitleLevel: Union[None, _str, 'types.StringFilter']
    jobTitle: Union[None, _str, 'types.StringFilter']
    department: Union[None, _str, 'types.StringFilter']
    minEmployeeSize: Union[None, _int, 'types.IntFilter']
    maxEmployeeSize: Union[None, _int, 'types.IntFilter']
    jobTitleLink: Union[None, _str, 'types.StringFilter']
    employeeSizeLink: Union[None, _str, 'types.StringFilter']
    revenue: Union[None, _int, 'types.BigIntFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Customer types


    

class CustomerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Customer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    salutation: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    industry: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLevel: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitle: Union[_str, 'types.StringWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    minEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    maxEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    jobTitleLink: Union[_str, 'types.StringWithAggregatesFilter']
    employeeSizeLink: Union[_str, 'types.StringWithAggregatesFilter']
    revenue: Union[_int, 'types.BigIntWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CustomerScalarWhereWithAggregatesInputRecursive1']
    OR: List['CustomerScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CustomerScalarWhereWithAggregatesInputRecursive1']


class CustomerScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Customer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    salutation: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    industry: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLevel: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitle: Union[_str, 'types.StringWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    minEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    maxEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    jobTitleLink: Union[_str, 'types.StringWithAggregatesFilter']
    employeeSizeLink: Union[_str, 'types.StringWithAggregatesFilter']
    revenue: Union[_int, 'types.BigIntWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CustomerScalarWhereWithAggregatesInputRecursive2']
    OR: List['CustomerScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CustomerScalarWhereWithAggregatesInputRecursive2']


class CustomerScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Customer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    salutation: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    industry: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLevel: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitle: Union[_str, 'types.StringWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    minEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    maxEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    jobTitleLink: Union[_str, 'types.StringWithAggregatesFilter']
    employeeSizeLink: Union[_str, 'types.StringWithAggregatesFilter']
    revenue: Union[_int, 'types.BigIntWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CustomerScalarWhereWithAggregatesInputRecursive3']
    OR: List['CustomerScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CustomerScalarWhereWithAggregatesInputRecursive3']


class CustomerScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Customer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    salutation: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    industry: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLevel: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitle: Union[_str, 'types.StringWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    minEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    maxEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    jobTitleLink: Union[_str, 'types.StringWithAggregatesFilter']
    employeeSizeLink: Union[_str, 'types.StringWithAggregatesFilter']
    revenue: Union[_int, 'types.BigIntWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CustomerScalarWhereWithAggregatesInputRecursive4']
    OR: List['CustomerScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CustomerScalarWhereWithAggregatesInputRecursive4']


class CustomerScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Customer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    salutation: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    company: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    industry: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLevel: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitle: Union[_str, 'types.StringWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    minEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    maxEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    jobTitleLink: Union[_str, 'types.StringWithAggregatesFilter']
    employeeSizeLink: Union[_str, 'types.StringWithAggregatesFilter']
    revenue: Union[_int, 'types.BigIntWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class CustomerGroupByOutput(TypedDict, total=False):
    id: _str
    salutation: _str
    firstName: _str
    lastName: _str
    email: _str
    company: _str
    address: _str
    city: _str
    state: _str
    country: _str
    zipCode: _str
    phone: _str
    mobilePhone: _str
    industry: _str
    jobTitleLevel: _str
    jobTitle: _str
    department: _str
    minEmployeeSize: _int
    maxEmployeeSize: _int
    jobTitleLink: _str
    employeeSizeLink: _str
    revenue: _int
    externalSource: _str
    externalId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'CustomerSumAggregateOutput'
    _avg: 'CustomerAvgAggregateOutput'
    _min: 'CustomerMinAggregateOutput'
    _max: 'CustomerMaxAggregateOutput'
    _count: 'CustomerCountAggregateOutput'


class CustomerAvgAggregateOutput(TypedDict, total=False):
    """Customer output for aggregating averages"""
    minEmployeeSize: float
    maxEmployeeSize: float
    revenue: float


class CustomerSumAggregateOutput(TypedDict, total=False):
    """Customer output for aggregating sums"""
    minEmployeeSize: _int
    maxEmployeeSize: _int
    revenue: _int


class CustomerScalarAggregateOutput(TypedDict, total=False):
    """Customer output including scalar fields"""
    id: _str
    salutation: _str
    firstName: _str
    lastName: _str
    email: _str
    company: _str
    address: _str
    city: _str
    state: _str
    country: _str
    zipCode: _str
    phone: _str
    mobilePhone: _str
    industry: _str
    jobTitleLevel: _str
    jobTitle: _str
    department: _str
    minEmployeeSize: _int
    maxEmployeeSize: _int
    jobTitleLink: _str
    employeeSizeLink: _str
    revenue: _int
    externalSource: _str
    externalId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


CustomerMinAggregateOutput = CustomerScalarAggregateOutput
CustomerMaxAggregateOutput = CustomerScalarAggregateOutput


class CustomerMaxAggregateInput(TypedDict, total=False):
    """Customer input for aggregating by max"""
    id: bool
    salutation: bool
    firstName: bool
    lastName: bool
    email: bool
    company: bool
    address: bool
    city: bool
    state: bool
    country: bool
    zipCode: bool
    phone: bool
    mobilePhone: bool
    industry: bool
    jobTitleLevel: bool
    jobTitle: bool
    department: bool
    minEmployeeSize: bool
    maxEmployeeSize: bool
    jobTitleLink: bool
    employeeSizeLink: bool
    revenue: bool
    externalSource: bool
    externalId: bool
    createdAt: bool
    updatedAt: bool


class CustomerMinAggregateInput(TypedDict, total=False):
    """Customer input for aggregating by min"""
    id: bool
    salutation: bool
    firstName: bool
    lastName: bool
    email: bool
    company: bool
    address: bool
    city: bool
    state: bool
    country: bool
    zipCode: bool
    phone: bool
    mobilePhone: bool
    industry: bool
    jobTitleLevel: bool
    jobTitle: bool
    department: bool
    minEmployeeSize: bool
    maxEmployeeSize: bool
    jobTitleLink: bool
    employeeSizeLink: bool
    revenue: bool
    externalSource: bool
    externalId: bool
    createdAt: bool
    updatedAt: bool


class CustomerNumberAggregateInput(TypedDict, total=False):
    """Customer input for aggregating numbers"""
    minEmployeeSize: bool
    maxEmployeeSize: bool
    revenue: bool


CustomerAvgAggregateInput = CustomerNumberAggregateInput
CustomerSumAggregateInput = CustomerNumberAggregateInput


CustomerCountAggregateInput = TypedDict(
    'CustomerCountAggregateInput',
    {
        'id': bool,
        'salutation': bool,
        'firstName': bool,
        'lastName': bool,
        'email': bool,
        'company': bool,
        'address': bool,
        'city': bool,
        'state': bool,
        'country': bool,
        'zipCode': bool,
        'phone': bool,
        'mobilePhone': bool,
        'industry': bool,
        'jobTitleLevel': bool,
        'jobTitle': bool,
        'department': bool,
        'minEmployeeSize': bool,
        'maxEmployeeSize': bool,
        'jobTitleLink': bool,
        'employeeSizeLink': bool,
        'revenue': bool,
        'externalSource': bool,
        'externalId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

CustomerCountAggregateOutput = TypedDict(
    'CustomerCountAggregateOutput',
    {
        'id': int,
        'salutation': int,
        'firstName': int,
        'lastName': int,
        'email': int,
        'company': int,
        'address': int,
        'city': int,
        'state': int,
        'country': int,
        'zipCode': int,
        'phone': int,
        'mobilePhone': int,
        'industry': int,
        'jobTitleLevel': int,
        'jobTitle': int,
        'department': int,
        'minEmployeeSize': int,
        'maxEmployeeSize': int,
        'jobTitleLink': int,
        'employeeSizeLink': int,
        'revenue': int,
        'externalSource': int,
        'externalId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


CustomerKeys = Literal[
    'id',
    'salutation',
    'firstName',
    'lastName',
    'email',
    'company',
    'address',
    'city',
    'state',
    'country',
    'zipCode',
    'phone',
    'mobilePhone',
    'industry',
    'jobTitleLevel',
    'jobTitle',
    'department',
    'minEmployeeSize',
    'maxEmployeeSize',
    'jobTitleLink',
    'employeeSizeLink',
    'revenue',
    'externalSource',
    'externalId',
    'createdAt',
    'updatedAt',
]
CustomerScalarFieldKeys = Literal[
    'id',
    'salutation',
    'firstName',
    'lastName',
    'email',
    'company',
    'address',
    'city',
    'state',
    'country',
    'zipCode',
    'phone',
    'mobilePhone',
    'industry',
    'jobTitleLevel',
    'jobTitle',
    'department',
    'minEmployeeSize',
    'maxEmployeeSize',
    'jobTitleLink',
    'employeeSizeLink',
    'revenue',
    'externalSource',
    'externalId',
    'createdAt',
    'updatedAt',
]
CustomerScalarFieldKeysT = TypeVar('CustomerScalarFieldKeysT', bound=CustomerScalarFieldKeys)

CustomerRelationalFieldKeys = _NoneType

# Company types

class CompanyOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Company create method"""
    name: Optional[_str]
    industry: Optional[_str]
    minEmployeeSize: Optional[_int]
    maxEmployeeSize: Optional[_int]
    employeeSizeLink: Optional[_str]
    revenue: Optional[_int]
    address: Optional[_str]
    city: Optional[_str]
    state: Optional[_str]
    country: Optional[_str]
    zipCode: Optional[_str]
    phone: Optional[_str]
    mobilePhone: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    prospects: 'ProspectCreateManyNestedWithoutRelationsInput'


class CompanyCreateInput(CompanyOptionalCreateInput):
    """Required arguments to the Company create method"""
    id: _str
    domain: _str
    externalSource: _str
    externalId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CompanyOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Company create method, without relations"""
    name: Optional[_str]
    industry: Optional[_str]
    minEmployeeSize: Optional[_int]
    maxEmployeeSize: Optional[_int]
    employeeSizeLink: Optional[_str]
    revenue: Optional[_int]
    address: Optional[_str]
    city: Optional[_str]
    state: Optional[_str]
    country: Optional[_str]
    zipCode: Optional[_str]
    phone: Optional[_str]
    mobilePhone: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CompanyCreateWithoutRelationsInput(CompanyOptionalCreateWithoutRelationsInput):
    """Required arguments to the Company create method, without relations"""
    id: _str
    domain: _str
    externalSource: _str
    externalId: _str

class CompanyConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CompanyCreateWithoutRelationsInput'
    where: 'CompanyWhereUniqueInput'

class CompanyCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CompanyCreateWithoutRelationsInput'
    connect: 'CompanyWhereUniqueInput'
    connect_or_create: 'CompanyConnectOrCreateWithoutRelationsInput'


class CompanyCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CompanyCreateWithoutRelationsInput', List['CompanyCreateWithoutRelationsInput']]
    connect: Union['CompanyWhereUniqueInput', List['CompanyWhereUniqueInput']]
    connect_or_create: Union['CompanyConnectOrCreateWithoutRelationsInput', List['CompanyConnectOrCreateWithoutRelationsInput']]

_CompanyWhereUnique_id_Input = TypedDict(
    '_CompanyWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_CompanyWhereUnique_domain_Input = TypedDict(
    '_CompanyWhereUnique_domain_Input',
    {
        'domain': '_str',
    },
    total=True
)

_CompanyCompoundexternalSource_externalIdKeyInner = TypedDict(
    '_CompanyCompoundexternalSource_externalIdKeyInner',
    {
        'externalSource': '_str',
        'externalId': '_str',
    },
    total=True
)

_CompanyCompoundexternalSource_externalIdKey = TypedDict(
    '_CompanyCompoundexternalSource_externalIdKey',
    {
        'externalSource_externalId': '_CompanyCompoundexternalSource_externalIdKeyInner',
    },
    total=True
)

CompanyWhereUniqueInput = Union[
    '_CompanyWhereUnique_id_Input',
    '_CompanyWhereUnique_domain_Input',
    '_CompanyCompoundexternalSource_externalIdKey',
]


class CompanyUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    domain: _str
    name: Optional[_str]
    industry: Optional[_str]
    minEmployeeSize: Optional[Union[AtomicIntInput, _int]]
    maxEmployeeSize: Optional[Union[AtomicIntInput, _int]]
    employeeSizeLink: Optional[_str]
    revenue: Optional[Union[AtomicBigIntInput, _int]]
    address: Optional[_str]
    city: Optional[_str]
    state: Optional[_str]
    country: Optional[_str]
    zipCode: Optional[_str]
    phone: Optional[_str]
    mobilePhone: Optional[_str]
    externalSource: _str
    externalId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    prospects: 'ProspectUpdateManyWithoutRelationsInput'


class CompanyUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    domain: _str
    name: Optional[_str]
    industry: Optional[_str]
    minEmployeeSize: Optional[Union[AtomicIntInput, _int]]
    maxEmployeeSize: Optional[Union[AtomicIntInput, _int]]
    employeeSizeLink: Optional[_str]
    revenue: Optional[Union[AtomicBigIntInput, _int]]
    address: Optional[_str]
    city: Optional[_str]
    state: Optional[_str]
    country: Optional[_str]
    zipCode: Optional[_str]
    phone: Optional[_str]
    mobilePhone: Optional[_str]
    externalSource: _str
    externalId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CompanyUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CompanyCreateWithoutRelationsInput']
    connect: List['CompanyWhereUniqueInput']
    connect_or_create: List['CompanyConnectOrCreateWithoutRelationsInput']
    set: List['CompanyWhereUniqueInput']
    disconnect: List['CompanyWhereUniqueInput']
    delete: List['CompanyWhereUniqueInput']

    # TODO
    # update: List['CompanyUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CompanyUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CompanyScalarWhereInput']
    # upsert: List['CompanyUpserteWithWhereUniqueWithoutRelationsInput']


class CompanyUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CompanyCreateWithoutRelationsInput'
    connect: 'CompanyWhereUniqueInput'
    connect_or_create: 'CompanyConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CompanyUpdateInput'
    # upsert: 'CompanyUpsertWithoutRelationsInput'


class CompanyUpsertInput(TypedDict):
    create: 'CompanyCreateInput'
    update: 'CompanyUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Company_id_OrderByInput = TypedDict(
    '_Company_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Company_domain_OrderByInput = TypedDict(
    '_Company_domain_OrderByInput',
    {
        'domain': 'SortOrder',
    },
    total=True
)

_Company_name_OrderByInput = TypedDict(
    '_Company_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Company_industry_OrderByInput = TypedDict(
    '_Company_industry_OrderByInput',
    {
        'industry': 'SortOrder',
    },
    total=True
)

_Company_minEmployeeSize_OrderByInput = TypedDict(
    '_Company_minEmployeeSize_OrderByInput',
    {
        'minEmployeeSize': 'SortOrder',
    },
    total=True
)

_Company_maxEmployeeSize_OrderByInput = TypedDict(
    '_Company_maxEmployeeSize_OrderByInput',
    {
        'maxEmployeeSize': 'SortOrder',
    },
    total=True
)

_Company_employeeSizeLink_OrderByInput = TypedDict(
    '_Company_employeeSizeLink_OrderByInput',
    {
        'employeeSizeLink': 'SortOrder',
    },
    total=True
)

_Company_revenue_OrderByInput = TypedDict(
    '_Company_revenue_OrderByInput',
    {
        'revenue': 'SortOrder',
    },
    total=True
)

_Company_address_OrderByInput = TypedDict(
    '_Company_address_OrderByInput',
    {
        'address': 'SortOrder',
    },
    total=True
)

_Company_city_OrderByInput = TypedDict(
    '_Company_city_OrderByInput',
    {
        'city': 'SortOrder',
    },
    total=True
)

_Company_state_OrderByInput = TypedDict(
    '_Company_state_OrderByInput',
    {
        'state': 'SortOrder',
    },
    total=True
)

_Company_country_OrderByInput = TypedDict(
    '_Company_country_OrderByInput',
    {
        'country': 'SortOrder',
    },
    total=True
)

_Company_zipCode_OrderByInput = TypedDict(
    '_Company_zipCode_OrderByInput',
    {
        'zipCode': 'SortOrder',
    },
    total=True
)

_Company_phone_OrderByInput = TypedDict(
    '_Company_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_Company_mobilePhone_OrderByInput = TypedDict(
    '_Company_mobilePhone_OrderByInput',
    {
        'mobilePhone': 'SortOrder',
    },
    total=True
)

_Company_externalSource_OrderByInput = TypedDict(
    '_Company_externalSource_OrderByInput',
    {
        'externalSource': 'SortOrder',
    },
    total=True
)

_Company_externalId_OrderByInput = TypedDict(
    '_Company_externalId_OrderByInput',
    {
        'externalId': 'SortOrder',
    },
    total=True
)

_Company_createdAt_OrderByInput = TypedDict(
    '_Company_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Company_updatedAt_OrderByInput = TypedDict(
    '_Company_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Company_RelevanceInner = TypedDict(
    '_Company_RelevanceInner',
    {
        'fields': 'List[CompanyScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Company_RelevanceOrderByInput = TypedDict(
    '_Company_RelevanceOrderByInput',
    {
        '_relevance': '_Company_RelevanceInner',
    },
    total=True
)

CompanyOrderByInput = Union[
    '_Company_id_OrderByInput',
    '_Company_domain_OrderByInput',
    '_Company_name_OrderByInput',
    '_Company_industry_OrderByInput',
    '_Company_minEmployeeSize_OrderByInput',
    '_Company_maxEmployeeSize_OrderByInput',
    '_Company_employeeSizeLink_OrderByInput',
    '_Company_revenue_OrderByInput',
    '_Company_address_OrderByInput',
    '_Company_city_OrderByInput',
    '_Company_state_OrderByInput',
    '_Company_country_OrderByInput',
    '_Company_zipCode_OrderByInput',
    '_Company_phone_OrderByInput',
    '_Company_mobilePhone_OrderByInput',
    '_Company_externalSource_OrderByInput',
    '_Company_externalId_OrderByInput',
    '_Company_createdAt_OrderByInput',
    '_Company_updatedAt_OrderByInput',
    '_Company_RelevanceOrderByInput',
]



# recursive Company types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CompanyRelationFilter = TypedDict(
    'CompanyRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CompanyListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CompanyInclude(TypedDict, total=False):
    """Company relational arguments"""
    prospects: Union[bool, 'FindManyProspectArgsFromCompany']


    

class CustomerIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""


class CustomerIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""


class CustomerIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""


class CustomerIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""


class CustomerIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class CustomerArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CustomerIncludeFromCustomerRecursive1'


class CustomerArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CustomerIncludeFromCustomerRecursive2'


class CustomerArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CustomerIncludeFromCustomerRecursive3'


class CustomerArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CustomerIncludeFromCustomerRecursive4'


class CustomerArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyCustomerArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive1'


class FindManyCustomerArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive2'


class FindManyCustomerArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive3'


class FindManyCustomerArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive4'


class FindManyCustomerArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    
    

class CompanyIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    prospects: Union[bool, 'FindManyProspectArgsFromCompanyRecursive1']


class CompanyIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    prospects: Union[bool, 'FindManyProspectArgsFromCompanyRecursive2']


class CompanyIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    prospects: Union[bool, 'FindManyProspectArgsFromCompanyRecursive3']


class CompanyIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    prospects: Union[bool, 'FindManyProspectArgsFromCompanyRecursive4']


class CompanyIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class CompanyArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyCompanyArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class ProspectIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive1']


class ProspectIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive2']


class ProspectIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive3']


class ProspectIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive4']


class ProspectIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class ProspectArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'ProspectIncludeFromProspectRecursive1'


class ProspectArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'ProspectIncludeFromProspectRecursive2'


class ProspectArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'ProspectIncludeFromProspectRecursive3'


class ProspectArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'ProspectIncludeFromProspectRecursive4'


class ProspectArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyProspectArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive1'


class FindManyProspectArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive2'


class FindManyProspectArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive3'


class FindManyProspectArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive4'


class FindManyProspectArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    
    

class UserIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""


class UserIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""


class UserIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""


class UserIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""


class UserIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class UserArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyUserArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class MaterializedViewLogIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""


class MaterializedViewLogIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""


class MaterializedViewLogIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""


class MaterializedViewLogIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""


class MaterializedViewLogIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class MaterializedViewLogArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive1'


class MaterializedViewLogArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive2'


class MaterializedViewLogArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive3'


class MaterializedViewLogArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive4'


class MaterializedViewLogArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyMaterializedViewLogArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive1'


class FindManyMaterializedViewLogArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive2'


class FindManyMaterializedViewLogArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive3'


class FindManyMaterializedViewLogArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive4'


class FindManyMaterializedViewLogArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    
    

class MaterializedViewErrorIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""


class MaterializedViewErrorIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""


class MaterializedViewErrorIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""


class MaterializedViewErrorIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""


class MaterializedViewErrorIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class MaterializedViewErrorArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1'


class MaterializedViewErrorArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2'


class MaterializedViewErrorArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3'


class MaterializedViewErrorArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4'


class MaterializedViewErrorArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyMaterializedViewErrorArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1'


class FindManyMaterializedViewErrorArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2'


class FindManyMaterializedViewErrorArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3'


class FindManyMaterializedViewErrorArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4'


class FindManyMaterializedViewErrorArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    


FindManyCompanyArgs = FindManyCompanyArgsFromCompany
FindFirstCompanyArgs = FindManyCompanyArgsFromCompany


    

class CompanyWhereInput(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    domain: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    industry: Union[None, _str, 'types.StringFilter']
    minEmployeeSize: Union[None, _int, 'types.IntFilter']
    maxEmployeeSize: Union[None, _int, 'types.IntFilter']
    employeeSizeLink: Union[None, _str, 'types.StringFilter']
    revenue: Union[None, _int, 'types.BigIntFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    prospects: 'ProspectListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive1', List['CompanyWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive1']
    OR: List['CompanyWhereInputRecursive1']
    NOT: List['CompanyWhereInputRecursive1']


class CompanyWhereInputRecursive1(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    domain: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    industry: Union[None, _str, 'types.StringFilter']
    minEmployeeSize: Union[None, _int, 'types.IntFilter']
    maxEmployeeSize: Union[None, _int, 'types.IntFilter']
    employeeSizeLink: Union[None, _str, 'types.StringFilter']
    revenue: Union[None, _int, 'types.BigIntFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    prospects: 'ProspectListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive2', List['CompanyWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive2']
    OR: List['CompanyWhereInputRecursive2']
    NOT: List['CompanyWhereInputRecursive2']


class CompanyWhereInputRecursive2(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    domain: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    industry: Union[None, _str, 'types.StringFilter']
    minEmployeeSize: Union[None, _int, 'types.IntFilter']
    maxEmployeeSize: Union[None, _int, 'types.IntFilter']
    employeeSizeLink: Union[None, _str, 'types.StringFilter']
    revenue: Union[None, _int, 'types.BigIntFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    prospects: 'ProspectListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive3', List['CompanyWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive3']
    OR: List['CompanyWhereInputRecursive3']
    NOT: List['CompanyWhereInputRecursive3']


class CompanyWhereInputRecursive3(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    domain: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    industry: Union[None, _str, 'types.StringFilter']
    minEmployeeSize: Union[None, _int, 'types.IntFilter']
    maxEmployeeSize: Union[None, _int, 'types.IntFilter']
    employeeSizeLink: Union[None, _str, 'types.StringFilter']
    revenue: Union[None, _int, 'types.BigIntFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    prospects: 'ProspectListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive4', List['CompanyWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive4']
    OR: List['CompanyWhereInputRecursive4']
    NOT: List['CompanyWhereInputRecursive4']


class CompanyWhereInputRecursive4(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    domain: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    industry: Union[None, _str, 'types.StringFilter']
    minEmployeeSize: Union[None, _int, 'types.IntFilter']
    maxEmployeeSize: Union[None, _int, 'types.IntFilter']
    employeeSizeLink: Union[None, _str, 'types.StringFilter']
    revenue: Union[None, _int, 'types.BigIntFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    prospects: 'ProspectListRelationFilter'



# aggregate Company types


    

class CompanyScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    domain: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    industry: Union[_str, 'types.StringWithAggregatesFilter']
    minEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    maxEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    employeeSizeLink: Union[_str, 'types.StringWithAggregatesFilter']
    revenue: Union[_int, 'types.BigIntWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive1']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive1']


class CompanyScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    domain: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    industry: Union[_str, 'types.StringWithAggregatesFilter']
    minEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    maxEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    employeeSizeLink: Union[_str, 'types.StringWithAggregatesFilter']
    revenue: Union[_int, 'types.BigIntWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive2']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive2']


class CompanyScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    domain: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    industry: Union[_str, 'types.StringWithAggregatesFilter']
    minEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    maxEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    employeeSizeLink: Union[_str, 'types.StringWithAggregatesFilter']
    revenue: Union[_int, 'types.BigIntWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive3']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive3']


class CompanyScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    domain: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    industry: Union[_str, 'types.StringWithAggregatesFilter']
    minEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    maxEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    employeeSizeLink: Union[_str, 'types.StringWithAggregatesFilter']
    revenue: Union[_int, 'types.BigIntWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive4']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive4']


class CompanyScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    domain: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    industry: Union[_str, 'types.StringWithAggregatesFilter']
    minEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    maxEmployeeSize: Union[_int, 'types.IntWithAggregatesFilter']
    employeeSizeLink: Union[_str, 'types.StringWithAggregatesFilter']
    revenue: Union[_int, 'types.BigIntWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class CompanyGroupByOutput(TypedDict, total=False):
    id: _str
    domain: _str
    name: _str
    industry: _str
    minEmployeeSize: _int
    maxEmployeeSize: _int
    employeeSizeLink: _str
    revenue: _int
    address: _str
    city: _str
    state: _str
    country: _str
    zipCode: _str
    phone: _str
    mobilePhone: _str
    externalSource: _str
    externalId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'CompanySumAggregateOutput'
    _avg: 'CompanyAvgAggregateOutput'
    _min: 'CompanyMinAggregateOutput'
    _max: 'CompanyMaxAggregateOutput'
    _count: 'CompanyCountAggregateOutput'


class CompanyAvgAggregateOutput(TypedDict, total=False):
    """Company output for aggregating averages"""
    minEmployeeSize: float
    maxEmployeeSize: float
    revenue: float


class CompanySumAggregateOutput(TypedDict, total=False):
    """Company output for aggregating sums"""
    minEmployeeSize: _int
    maxEmployeeSize: _int
    revenue: _int


class CompanyScalarAggregateOutput(TypedDict, total=False):
    """Company output including scalar fields"""
    id: _str
    domain: _str
    name: _str
    industry: _str
    minEmployeeSize: _int
    maxEmployeeSize: _int
    employeeSizeLink: _str
    revenue: _int
    address: _str
    city: _str
    state: _str
    country: _str
    zipCode: _str
    phone: _str
    mobilePhone: _str
    externalSource: _str
    externalId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


CompanyMinAggregateOutput = CompanyScalarAggregateOutput
CompanyMaxAggregateOutput = CompanyScalarAggregateOutput


class CompanyMaxAggregateInput(TypedDict, total=False):
    """Company input for aggregating by max"""
    id: bool
    domain: bool
    name: bool
    industry: bool
    minEmployeeSize: bool
    maxEmployeeSize: bool
    employeeSizeLink: bool
    revenue: bool
    address: bool
    city: bool
    state: bool
    country: bool
    zipCode: bool
    phone: bool
    mobilePhone: bool
    externalSource: bool
    externalId: bool
    createdAt: bool
    updatedAt: bool


class CompanyMinAggregateInput(TypedDict, total=False):
    """Company input for aggregating by min"""
    id: bool
    domain: bool
    name: bool
    industry: bool
    minEmployeeSize: bool
    maxEmployeeSize: bool
    employeeSizeLink: bool
    revenue: bool
    address: bool
    city: bool
    state: bool
    country: bool
    zipCode: bool
    phone: bool
    mobilePhone: bool
    externalSource: bool
    externalId: bool
    createdAt: bool
    updatedAt: bool


class CompanyNumberAggregateInput(TypedDict, total=False):
    """Company input for aggregating numbers"""
    minEmployeeSize: bool
    maxEmployeeSize: bool
    revenue: bool


CompanyAvgAggregateInput = CompanyNumberAggregateInput
CompanySumAggregateInput = CompanyNumberAggregateInput


CompanyCountAggregateInput = TypedDict(
    'CompanyCountAggregateInput',
    {
        'id': bool,
        'domain': bool,
        'name': bool,
        'industry': bool,
        'minEmployeeSize': bool,
        'maxEmployeeSize': bool,
        'employeeSizeLink': bool,
        'revenue': bool,
        'address': bool,
        'city': bool,
        'state': bool,
        'country': bool,
        'zipCode': bool,
        'phone': bool,
        'mobilePhone': bool,
        'externalSource': bool,
        'externalId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

CompanyCountAggregateOutput = TypedDict(
    'CompanyCountAggregateOutput',
    {
        'id': int,
        'domain': int,
        'name': int,
        'industry': int,
        'minEmployeeSize': int,
        'maxEmployeeSize': int,
        'employeeSizeLink': int,
        'revenue': int,
        'address': int,
        'city': int,
        'state': int,
        'country': int,
        'zipCode': int,
        'phone': int,
        'mobilePhone': int,
        'externalSource': int,
        'externalId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


CompanyKeys = Literal[
    'id',
    'domain',
    'name',
    'industry',
    'minEmployeeSize',
    'maxEmployeeSize',
    'employeeSizeLink',
    'revenue',
    'address',
    'city',
    'state',
    'country',
    'zipCode',
    'phone',
    'mobilePhone',
    'externalSource',
    'externalId',
    'createdAt',
    'updatedAt',
    'prospects',
]
CompanyScalarFieldKeys = Literal[
    'id',
    'domain',
    'name',
    'industry',
    'minEmployeeSize',
    'maxEmployeeSize',
    'employeeSizeLink',
    'revenue',
    'address',
    'city',
    'state',
    'country',
    'zipCode',
    'phone',
    'mobilePhone',
    'externalSource',
    'externalId',
    'createdAt',
    'updatedAt',
]
CompanyScalarFieldKeysT = TypeVar('CompanyScalarFieldKeysT', bound=CompanyScalarFieldKeys)

CompanyRelationalFieldKeys = Literal[
        'prospects',
    ]

# Prospect types

class ProspectOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Prospect create method"""
    salutation: Optional[_str]
    firstName: Optional[_str]
    lastName: Optional[_str]
    email: Optional[_str]
    jobTitle: Optional[_str]
    jobTitleLevel: Optional[_str]
    department: Optional[_str]
    jobTitleLink: Optional[_str]
    address: Optional[_str]
    city: Optional[_str]
    state: Optional[_str]
    country: Optional[_str]
    zipCode: Optional[_str]
    phone: Optional[_str]
    mobilePhone: Optional[_str]
    companyId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    company: 'CompanyCreateNestedWithoutRelationsInput'


class ProspectCreateInput(ProspectOptionalCreateInput):
    """Required arguments to the Prospect create method"""
    id: _str
    externalSource: _str
    externalId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProspectOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Prospect create method, without relations"""
    salutation: Optional[_str]
    firstName: Optional[_str]
    lastName: Optional[_str]
    email: Optional[_str]
    jobTitle: Optional[_str]
    jobTitleLevel: Optional[_str]
    department: Optional[_str]
    jobTitleLink: Optional[_str]
    address: Optional[_str]
    city: Optional[_str]
    state: Optional[_str]
    country: Optional[_str]
    zipCode: Optional[_str]
    phone: Optional[_str]
    mobilePhone: Optional[_str]
    companyId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ProspectCreateWithoutRelationsInput(ProspectOptionalCreateWithoutRelationsInput):
    """Required arguments to the Prospect create method, without relations"""
    id: _str
    externalSource: _str
    externalId: _str

class ProspectConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProspectCreateWithoutRelationsInput'
    where: 'ProspectWhereUniqueInput'

class ProspectCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProspectCreateWithoutRelationsInput'
    connect: 'ProspectWhereUniqueInput'
    connect_or_create: 'ProspectConnectOrCreateWithoutRelationsInput'


class ProspectCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProspectCreateWithoutRelationsInput', List['ProspectCreateWithoutRelationsInput']]
    connect: Union['ProspectWhereUniqueInput', List['ProspectWhereUniqueInput']]
    connect_or_create: Union['ProspectConnectOrCreateWithoutRelationsInput', List['ProspectConnectOrCreateWithoutRelationsInput']]

_ProspectWhereUnique_id_Input = TypedDict(
    '_ProspectWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ProspectCompoundexternalSource_externalIdKeyInner = TypedDict(
    '_ProspectCompoundexternalSource_externalIdKeyInner',
    {
        'externalSource': '_str',
        'externalId': '_str',
    },
    total=True
)

_ProspectCompoundexternalSource_externalIdKey = TypedDict(
    '_ProspectCompoundexternalSource_externalIdKey',
    {
        'externalSource_externalId': '_ProspectCompoundexternalSource_externalIdKeyInner',
    },
    total=True
)

ProspectWhereUniqueInput = Union[
    '_ProspectWhereUnique_id_Input',
    '_ProspectCompoundexternalSource_externalIdKey',
]


class ProspectUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    salutation: Optional[_str]
    firstName: Optional[_str]
    lastName: Optional[_str]
    email: Optional[_str]
    jobTitle: Optional[_str]
    jobTitleLevel: Optional[_str]
    department: Optional[_str]
    jobTitleLink: Optional[_str]
    address: Optional[_str]
    city: Optional[_str]
    state: Optional[_str]
    country: Optional[_str]
    zipCode: Optional[_str]
    phone: Optional[_str]
    mobilePhone: Optional[_str]
    externalSource: _str
    externalId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    company: 'CompanyUpdateOneWithoutRelationsInput'


class ProspectUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    salutation: Optional[_str]
    firstName: Optional[_str]
    lastName: Optional[_str]
    email: Optional[_str]
    jobTitle: Optional[_str]
    jobTitleLevel: Optional[_str]
    department: Optional[_str]
    jobTitleLink: Optional[_str]
    address: Optional[_str]
    city: Optional[_str]
    state: Optional[_str]
    country: Optional[_str]
    zipCode: Optional[_str]
    phone: Optional[_str]
    mobilePhone: Optional[_str]
    externalSource: _str
    externalId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ProspectUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProspectCreateWithoutRelationsInput']
    connect: List['ProspectWhereUniqueInput']
    connect_or_create: List['ProspectConnectOrCreateWithoutRelationsInput']
    set: List['ProspectWhereUniqueInput']
    disconnect: List['ProspectWhereUniqueInput']
    delete: List['ProspectWhereUniqueInput']

    # TODO
    # update: List['ProspectUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProspectUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProspectScalarWhereInput']
    # upsert: List['ProspectUpserteWithWhereUniqueWithoutRelationsInput']


class ProspectUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProspectCreateWithoutRelationsInput'
    connect: 'ProspectWhereUniqueInput'
    connect_or_create: 'ProspectConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProspectUpdateInput'
    # upsert: 'ProspectUpsertWithoutRelationsInput'


class ProspectUpsertInput(TypedDict):
    create: 'ProspectCreateInput'
    update: 'ProspectUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Prospect_id_OrderByInput = TypedDict(
    '_Prospect_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Prospect_salutation_OrderByInput = TypedDict(
    '_Prospect_salutation_OrderByInput',
    {
        'salutation': 'SortOrder',
    },
    total=True
)

_Prospect_firstName_OrderByInput = TypedDict(
    '_Prospect_firstName_OrderByInput',
    {
        'firstName': 'SortOrder',
    },
    total=True
)

_Prospect_lastName_OrderByInput = TypedDict(
    '_Prospect_lastName_OrderByInput',
    {
        'lastName': 'SortOrder',
    },
    total=True
)

_Prospect_email_OrderByInput = TypedDict(
    '_Prospect_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Prospect_jobTitle_OrderByInput = TypedDict(
    '_Prospect_jobTitle_OrderByInput',
    {
        'jobTitle': 'SortOrder',
    },
    total=True
)

_Prospect_jobTitleLevel_OrderByInput = TypedDict(
    '_Prospect_jobTitleLevel_OrderByInput',
    {
        'jobTitleLevel': 'SortOrder',
    },
    total=True
)

_Prospect_department_OrderByInput = TypedDict(
    '_Prospect_department_OrderByInput',
    {
        'department': 'SortOrder',
    },
    total=True
)

_Prospect_jobTitleLink_OrderByInput = TypedDict(
    '_Prospect_jobTitleLink_OrderByInput',
    {
        'jobTitleLink': 'SortOrder',
    },
    total=True
)

_Prospect_address_OrderByInput = TypedDict(
    '_Prospect_address_OrderByInput',
    {
        'address': 'SortOrder',
    },
    total=True
)

_Prospect_city_OrderByInput = TypedDict(
    '_Prospect_city_OrderByInput',
    {
        'city': 'SortOrder',
    },
    total=True
)

_Prospect_state_OrderByInput = TypedDict(
    '_Prospect_state_OrderByInput',
    {
        'state': 'SortOrder',
    },
    total=True
)

_Prospect_country_OrderByInput = TypedDict(
    '_Prospect_country_OrderByInput',
    {
        'country': 'SortOrder',
    },
    total=True
)

_Prospect_zipCode_OrderByInput = TypedDict(
    '_Prospect_zipCode_OrderByInput',
    {
        'zipCode': 'SortOrder',
    },
    total=True
)

_Prospect_phone_OrderByInput = TypedDict(
    '_Prospect_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_Prospect_mobilePhone_OrderByInput = TypedDict(
    '_Prospect_mobilePhone_OrderByInput',
    {
        'mobilePhone': 'SortOrder',
    },
    total=True
)

_Prospect_companyId_OrderByInput = TypedDict(
    '_Prospect_companyId_OrderByInput',
    {
        'companyId': 'SortOrder',
    },
    total=True
)

_Prospect_externalSource_OrderByInput = TypedDict(
    '_Prospect_externalSource_OrderByInput',
    {
        'externalSource': 'SortOrder',
    },
    total=True
)

_Prospect_externalId_OrderByInput = TypedDict(
    '_Prospect_externalId_OrderByInput',
    {
        'externalId': 'SortOrder',
    },
    total=True
)

_Prospect_createdAt_OrderByInput = TypedDict(
    '_Prospect_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Prospect_updatedAt_OrderByInput = TypedDict(
    '_Prospect_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Prospect_RelevanceInner = TypedDict(
    '_Prospect_RelevanceInner',
    {
        'fields': 'List[ProspectScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Prospect_RelevanceOrderByInput = TypedDict(
    '_Prospect_RelevanceOrderByInput',
    {
        '_relevance': '_Prospect_RelevanceInner',
    },
    total=True
)

ProspectOrderByInput = Union[
    '_Prospect_id_OrderByInput',
    '_Prospect_salutation_OrderByInput',
    '_Prospect_firstName_OrderByInput',
    '_Prospect_lastName_OrderByInput',
    '_Prospect_email_OrderByInput',
    '_Prospect_jobTitle_OrderByInput',
    '_Prospect_jobTitleLevel_OrderByInput',
    '_Prospect_department_OrderByInput',
    '_Prospect_jobTitleLink_OrderByInput',
    '_Prospect_address_OrderByInput',
    '_Prospect_city_OrderByInput',
    '_Prospect_state_OrderByInput',
    '_Prospect_country_OrderByInput',
    '_Prospect_zipCode_OrderByInput',
    '_Prospect_phone_OrderByInput',
    '_Prospect_mobilePhone_OrderByInput',
    '_Prospect_companyId_OrderByInput',
    '_Prospect_externalSource_OrderByInput',
    '_Prospect_externalId_OrderByInput',
    '_Prospect_createdAt_OrderByInput',
    '_Prospect_updatedAt_OrderByInput',
    '_Prospect_RelevanceOrderByInput',
]



# recursive Prospect types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProspectRelationFilter = TypedDict(
    'ProspectRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProspectListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProspectInclude(TypedDict, total=False):
    """Prospect relational arguments"""
    company: Union[bool, 'CompanyArgsFromProspect']


    

class CustomerIncludeFromProspect(TypedDict, total=False):
    """Relational arguments for Prospect"""


class CustomerIncludeFromProspectRecursive1(TypedDict, total=False):
    """Relational arguments for Prospect"""


class CustomerIncludeFromProspectRecursive2(TypedDict, total=False):
    """Relational arguments for Prospect"""


class CustomerIncludeFromProspectRecursive3(TypedDict, total=False):
    """Relational arguments for Prospect"""


class CustomerIncludeFromProspectRecursive4(TypedDict, total=False):
    """Relational arguments for Prospect"""

    

class CustomerArgsFromProspect(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'CustomerIncludeFromCustomerRecursive1'


class CustomerArgsFromProspectRecursive1(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'CustomerIncludeFromCustomerRecursive2'


class CustomerArgsFromProspectRecursive2(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'CustomerIncludeFromCustomerRecursive3'


class CustomerArgsFromProspectRecursive3(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'CustomerIncludeFromCustomerRecursive4'


class CustomerArgsFromProspectRecursive4(TypedDict, total=False):
    """Arguments for Prospect"""
    
    

class FindManyCustomerArgsFromProspect(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive1'


class FindManyCustomerArgsFromProspectRecursive1(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive2'


class FindManyCustomerArgsFromProspectRecursive2(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive3'


class FindManyCustomerArgsFromProspectRecursive3(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive4'


class FindManyCustomerArgsFromProspectRecursive4(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    
    

class CompanyIncludeFromProspect(TypedDict, total=False):
    """Relational arguments for Prospect"""
    prospects: Union[bool, 'FindManyProspectArgsFromProspectRecursive1']


class CompanyIncludeFromProspectRecursive1(TypedDict, total=False):
    """Relational arguments for Prospect"""
    prospects: Union[bool, 'FindManyProspectArgsFromProspectRecursive2']


class CompanyIncludeFromProspectRecursive2(TypedDict, total=False):
    """Relational arguments for Prospect"""
    prospects: Union[bool, 'FindManyProspectArgsFromProspectRecursive3']


class CompanyIncludeFromProspectRecursive3(TypedDict, total=False):
    """Relational arguments for Prospect"""
    prospects: Union[bool, 'FindManyProspectArgsFromProspectRecursive4']


class CompanyIncludeFromProspectRecursive4(TypedDict, total=False):
    """Relational arguments for Prospect"""

    

class CompanyArgsFromProspect(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromProspectRecursive1(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromProspectRecursive2(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromProspectRecursive3(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromProspectRecursive4(TypedDict, total=False):
    """Arguments for Prospect"""
    
    

class FindManyCompanyArgsFromProspect(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromProspectRecursive1(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromProspectRecursive2(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromProspectRecursive3(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromProspectRecursive4(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class ProspectIncludeFromProspect(TypedDict, total=False):
    """Relational arguments for Prospect"""
    company: Union[bool, 'CompanyArgsFromProspectRecursive1']


class ProspectIncludeFromProspectRecursive1(TypedDict, total=False):
    """Relational arguments for Prospect"""
    company: Union[bool, 'CompanyArgsFromProspectRecursive2']


class ProspectIncludeFromProspectRecursive2(TypedDict, total=False):
    """Relational arguments for Prospect"""
    company: Union[bool, 'CompanyArgsFromProspectRecursive3']


class ProspectIncludeFromProspectRecursive3(TypedDict, total=False):
    """Relational arguments for Prospect"""
    company: Union[bool, 'CompanyArgsFromProspectRecursive4']


class ProspectIncludeFromProspectRecursive4(TypedDict, total=False):
    """Relational arguments for Prospect"""

    

class ProspectArgsFromProspect(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'ProspectIncludeFromProspectRecursive1'


class ProspectArgsFromProspectRecursive1(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'ProspectIncludeFromProspectRecursive2'


class ProspectArgsFromProspectRecursive2(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'ProspectIncludeFromProspectRecursive3'


class ProspectArgsFromProspectRecursive3(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'ProspectIncludeFromProspectRecursive4'


class ProspectArgsFromProspectRecursive4(TypedDict, total=False):
    """Arguments for Prospect"""
    
    

class FindManyProspectArgsFromProspect(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive1'


class FindManyProspectArgsFromProspectRecursive1(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive2'


class FindManyProspectArgsFromProspectRecursive2(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive3'


class FindManyProspectArgsFromProspectRecursive3(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive4'


class FindManyProspectArgsFromProspectRecursive4(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    
    

class UserIncludeFromProspect(TypedDict, total=False):
    """Relational arguments for Prospect"""


class UserIncludeFromProspectRecursive1(TypedDict, total=False):
    """Relational arguments for Prospect"""


class UserIncludeFromProspectRecursive2(TypedDict, total=False):
    """Relational arguments for Prospect"""


class UserIncludeFromProspectRecursive3(TypedDict, total=False):
    """Relational arguments for Prospect"""


class UserIncludeFromProspectRecursive4(TypedDict, total=False):
    """Relational arguments for Prospect"""

    

class UserArgsFromProspect(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProspectRecursive1(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProspectRecursive2(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProspectRecursive3(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProspectRecursive4(TypedDict, total=False):
    """Arguments for Prospect"""
    
    

class FindManyUserArgsFromProspect(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProspectRecursive1(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProspectRecursive2(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProspectRecursive3(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProspectRecursive4(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class MaterializedViewLogIncludeFromProspect(TypedDict, total=False):
    """Relational arguments for Prospect"""


class MaterializedViewLogIncludeFromProspectRecursive1(TypedDict, total=False):
    """Relational arguments for Prospect"""


class MaterializedViewLogIncludeFromProspectRecursive2(TypedDict, total=False):
    """Relational arguments for Prospect"""


class MaterializedViewLogIncludeFromProspectRecursive3(TypedDict, total=False):
    """Relational arguments for Prospect"""


class MaterializedViewLogIncludeFromProspectRecursive4(TypedDict, total=False):
    """Relational arguments for Prospect"""

    

class MaterializedViewLogArgsFromProspect(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive1'


class MaterializedViewLogArgsFromProspectRecursive1(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive2'


class MaterializedViewLogArgsFromProspectRecursive2(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive3'


class MaterializedViewLogArgsFromProspectRecursive3(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive4'


class MaterializedViewLogArgsFromProspectRecursive4(TypedDict, total=False):
    """Arguments for Prospect"""
    
    

class FindManyMaterializedViewLogArgsFromProspect(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive1'


class FindManyMaterializedViewLogArgsFromProspectRecursive1(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive2'


class FindManyMaterializedViewLogArgsFromProspectRecursive2(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive3'


class FindManyMaterializedViewLogArgsFromProspectRecursive3(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive4'


class FindManyMaterializedViewLogArgsFromProspectRecursive4(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    
    

class MaterializedViewErrorIncludeFromProspect(TypedDict, total=False):
    """Relational arguments for Prospect"""


class MaterializedViewErrorIncludeFromProspectRecursive1(TypedDict, total=False):
    """Relational arguments for Prospect"""


class MaterializedViewErrorIncludeFromProspectRecursive2(TypedDict, total=False):
    """Relational arguments for Prospect"""


class MaterializedViewErrorIncludeFromProspectRecursive3(TypedDict, total=False):
    """Relational arguments for Prospect"""


class MaterializedViewErrorIncludeFromProspectRecursive4(TypedDict, total=False):
    """Relational arguments for Prospect"""

    

class MaterializedViewErrorArgsFromProspect(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1'


class MaterializedViewErrorArgsFromProspectRecursive1(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2'


class MaterializedViewErrorArgsFromProspectRecursive2(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3'


class MaterializedViewErrorArgsFromProspectRecursive3(TypedDict, total=False):
    """Arguments for Prospect"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4'


class MaterializedViewErrorArgsFromProspectRecursive4(TypedDict, total=False):
    """Arguments for Prospect"""
    
    

class FindManyMaterializedViewErrorArgsFromProspect(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1'


class FindManyMaterializedViewErrorArgsFromProspectRecursive1(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2'


class FindManyMaterializedViewErrorArgsFromProspectRecursive2(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3'


class FindManyMaterializedViewErrorArgsFromProspectRecursive3(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4'


class FindManyMaterializedViewErrorArgsFromProspectRecursive4(TypedDict, total=False):
    """Arguments for Prospect"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    


FindManyProspectArgs = FindManyProspectArgsFromProspect
FindFirstProspectArgs = FindManyProspectArgsFromProspect


    

class ProspectWhereInput(TypedDict, total=False):
    """Prospect arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    salutation: Union[None, _str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    jobTitle: Union[None, _str, 'types.StringFilter']
    jobTitleLevel: Union[None, _str, 'types.StringFilter']
    department: Union[None, _str, 'types.StringFilter']
    jobTitleLink: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['ProspectWhereInputRecursive1', List['ProspectWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProspectWhereInputRecursive1']
    OR: List['ProspectWhereInputRecursive1']
    NOT: List['ProspectWhereInputRecursive1']


class ProspectWhereInputRecursive1(TypedDict, total=False):
    """Prospect arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    salutation: Union[None, _str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    jobTitle: Union[None, _str, 'types.StringFilter']
    jobTitleLevel: Union[None, _str, 'types.StringFilter']
    department: Union[None, _str, 'types.StringFilter']
    jobTitleLink: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['ProspectWhereInputRecursive2', List['ProspectWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProspectWhereInputRecursive2']
    OR: List['ProspectWhereInputRecursive2']
    NOT: List['ProspectWhereInputRecursive2']


class ProspectWhereInputRecursive2(TypedDict, total=False):
    """Prospect arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    salutation: Union[None, _str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    jobTitle: Union[None, _str, 'types.StringFilter']
    jobTitleLevel: Union[None, _str, 'types.StringFilter']
    department: Union[None, _str, 'types.StringFilter']
    jobTitleLink: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['ProspectWhereInputRecursive3', List['ProspectWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProspectWhereInputRecursive3']
    OR: List['ProspectWhereInputRecursive3']
    NOT: List['ProspectWhereInputRecursive3']


class ProspectWhereInputRecursive3(TypedDict, total=False):
    """Prospect arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    salutation: Union[None, _str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    jobTitle: Union[None, _str, 'types.StringFilter']
    jobTitleLevel: Union[None, _str, 'types.StringFilter']
    department: Union[None, _str, 'types.StringFilter']
    jobTitleLink: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['ProspectWhereInputRecursive4', List['ProspectWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProspectWhereInputRecursive4']
    OR: List['ProspectWhereInputRecursive4']
    NOT: List['ProspectWhereInputRecursive4']


class ProspectWhereInputRecursive4(TypedDict, total=False):
    """Prospect arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    salutation: Union[None, _str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    jobTitle: Union[None, _str, 'types.StringFilter']
    jobTitleLevel: Union[None, _str, 'types.StringFilter']
    department: Union[None, _str, 'types.StringFilter']
    jobTitleLink: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    state: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    zipCode: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    mobilePhone: Union[None, _str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    externalSource: Union[_str, 'types.StringFilter']
    externalId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    company: 'CompanyRelationFilter'



# aggregate Prospect types


    

class ProspectScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Prospect arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    salutation: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitle: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLevel: Union[_str, 'types.StringWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLink: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProspectScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProspectScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProspectScalarWhereWithAggregatesInputRecursive1']


class ProspectScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Prospect arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    salutation: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitle: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLevel: Union[_str, 'types.StringWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLink: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProspectScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProspectScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProspectScalarWhereWithAggregatesInputRecursive2']


class ProspectScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Prospect arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    salutation: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitle: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLevel: Union[_str, 'types.StringWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLink: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProspectScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProspectScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProspectScalarWhereWithAggregatesInputRecursive3']


class ProspectScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Prospect arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    salutation: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitle: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLevel: Union[_str, 'types.StringWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLink: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProspectScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProspectScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProspectScalarWhereWithAggregatesInputRecursive4']


class ProspectScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Prospect arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    salutation: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitle: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLevel: Union[_str, 'types.StringWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    jobTitleLink: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    mobilePhone: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    externalSource: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ProspectGroupByOutput(TypedDict, total=False):
    id: _str
    salutation: _str
    firstName: _str
    lastName: _str
    email: _str
    jobTitle: _str
    jobTitleLevel: _str
    department: _str
    jobTitleLink: _str
    address: _str
    city: _str
    state: _str
    country: _str
    zipCode: _str
    phone: _str
    mobilePhone: _str
    companyId: _str
    externalSource: _str
    externalId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ProspectSumAggregateOutput'
    _avg: 'ProspectAvgAggregateOutput'
    _min: 'ProspectMinAggregateOutput'
    _max: 'ProspectMaxAggregateOutput'
    _count: 'ProspectCountAggregateOutput'


class ProspectAvgAggregateOutput(TypedDict, total=False):
    """Prospect output for aggregating averages"""


class ProspectSumAggregateOutput(TypedDict, total=False):
    """Prospect output for aggregating sums"""


class ProspectScalarAggregateOutput(TypedDict, total=False):
    """Prospect output including scalar fields"""
    id: _str
    salutation: _str
    firstName: _str
    lastName: _str
    email: _str
    jobTitle: _str
    jobTitleLevel: _str
    department: _str
    jobTitleLink: _str
    address: _str
    city: _str
    state: _str
    country: _str
    zipCode: _str
    phone: _str
    mobilePhone: _str
    companyId: _str
    externalSource: _str
    externalId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ProspectMinAggregateOutput = ProspectScalarAggregateOutput
ProspectMaxAggregateOutput = ProspectScalarAggregateOutput


class ProspectMaxAggregateInput(TypedDict, total=False):
    """Prospect input for aggregating by max"""
    id: bool
    salutation: bool
    firstName: bool
    lastName: bool
    email: bool
    jobTitle: bool
    jobTitleLevel: bool
    department: bool
    jobTitleLink: bool
    address: bool
    city: bool
    state: bool
    country: bool
    zipCode: bool
    phone: bool
    mobilePhone: bool
    companyId: bool
    externalSource: bool
    externalId: bool
    createdAt: bool
    updatedAt: bool


class ProspectMinAggregateInput(TypedDict, total=False):
    """Prospect input for aggregating by min"""
    id: bool
    salutation: bool
    firstName: bool
    lastName: bool
    email: bool
    jobTitle: bool
    jobTitleLevel: bool
    department: bool
    jobTitleLink: bool
    address: bool
    city: bool
    state: bool
    country: bool
    zipCode: bool
    phone: bool
    mobilePhone: bool
    companyId: bool
    externalSource: bool
    externalId: bool
    createdAt: bool
    updatedAt: bool


class ProspectNumberAggregateInput(TypedDict, total=False):
    """Prospect input for aggregating numbers"""


ProspectAvgAggregateInput = ProspectNumberAggregateInput
ProspectSumAggregateInput = ProspectNumberAggregateInput


ProspectCountAggregateInput = TypedDict(
    'ProspectCountAggregateInput',
    {
        'id': bool,
        'salutation': bool,
        'firstName': bool,
        'lastName': bool,
        'email': bool,
        'jobTitle': bool,
        'jobTitleLevel': bool,
        'department': bool,
        'jobTitleLink': bool,
        'address': bool,
        'city': bool,
        'state': bool,
        'country': bool,
        'zipCode': bool,
        'phone': bool,
        'mobilePhone': bool,
        'companyId': bool,
        'externalSource': bool,
        'externalId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ProspectCountAggregateOutput = TypedDict(
    'ProspectCountAggregateOutput',
    {
        'id': int,
        'salutation': int,
        'firstName': int,
        'lastName': int,
        'email': int,
        'jobTitle': int,
        'jobTitleLevel': int,
        'department': int,
        'jobTitleLink': int,
        'address': int,
        'city': int,
        'state': int,
        'country': int,
        'zipCode': int,
        'phone': int,
        'mobilePhone': int,
        'companyId': int,
        'externalSource': int,
        'externalId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ProspectKeys = Literal[
    'id',
    'salutation',
    'firstName',
    'lastName',
    'email',
    'jobTitle',
    'jobTitleLevel',
    'department',
    'jobTitleLink',
    'address',
    'city',
    'state',
    'country',
    'zipCode',
    'phone',
    'mobilePhone',
    'companyId',
    'externalSource',
    'externalId',
    'createdAt',
    'updatedAt',
    'company',
]
ProspectScalarFieldKeys = Literal[
    'id',
    'salutation',
    'firstName',
    'lastName',
    'email',
    'jobTitle',
    'jobTitleLevel',
    'department',
    'jobTitleLink',
    'address',
    'city',
    'state',
    'country',
    'zipCode',
    'phone',
    'mobilePhone',
    'companyId',
    'externalSource',
    'externalId',
    'createdAt',
    'updatedAt',
]
ProspectScalarFieldKeysT = TypeVar('ProspectScalarFieldKeysT', bound=ProspectScalarFieldKeys)

ProspectRelationalFieldKeys = Literal[
        'company',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    role: 'enums.UserRole'
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    password: _str
    firstName: _str
    lastName: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    role: 'enums.UserRole'
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    password: _str
    firstName: _str
    lastName: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    password: _str
    firstName: _str
    lastName: _str
    role: 'enums.UserRole'
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    password: _str
    firstName: _str
    lastName: _str
    role: 'enums.UserRole'
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_firstName_OrderByInput = TypedDict(
    '_User_firstName_OrderByInput',
    {
        'firstName': 'SortOrder',
    },
    total=True
)

_User_lastName_OrderByInput = TypedDict(
    '_User_lastName_OrderByInput',
    {
        'lastName': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_isActive_OrderByInput = TypedDict(
    '_User_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_firstName_OrderByInput',
    '_User_lastName_OrderByInput',
    '_User_role_OrderByInput',
    '_User_isActive_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""


    

class CustomerIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class CustomerIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class CustomerIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class CustomerIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class CustomerIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CustomerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CustomerIncludeFromCustomerRecursive1'


class CustomerArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CustomerIncludeFromCustomerRecursive2'


class CustomerArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CustomerIncludeFromCustomerRecursive3'


class CustomerArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CustomerIncludeFromCustomerRecursive4'


class CustomerArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCustomerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive1'


class FindManyCustomerArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive2'


class FindManyCustomerArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive3'


class FindManyCustomerArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive4'


class FindManyCustomerArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    
    

class CompanyIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    prospects: Union[bool, 'FindManyProspectArgsFromUserRecursive1']


class CompanyIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    prospects: Union[bool, 'FindManyProspectArgsFromUserRecursive2']


class CompanyIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    prospects: Union[bool, 'FindManyProspectArgsFromUserRecursive3']


class CompanyIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    prospects: Union[bool, 'FindManyProspectArgsFromUserRecursive4']


class CompanyIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CompanyArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCompanyArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class ProspectIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive1']


class ProspectIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive2']


class ProspectIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive3']


class ProspectIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive4']


class ProspectIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProspectArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProspectIncludeFromProspectRecursive1'


class ProspectArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProspectIncludeFromProspectRecursive2'


class ProspectArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProspectIncludeFromProspectRecursive3'


class ProspectArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProspectIncludeFromProspectRecursive4'


class ProspectArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProspectArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive1'


class FindManyProspectArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive2'


class FindManyProspectArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive3'


class FindManyProspectArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive4'


class FindManyProspectArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class MaterializedViewLogIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class MaterializedViewLogIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class MaterializedViewLogIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class MaterializedViewLogIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class MaterializedViewLogIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MaterializedViewLogArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive1'


class MaterializedViewLogArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive2'


class MaterializedViewLogArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive3'


class MaterializedViewLogArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive4'


class MaterializedViewLogArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMaterializedViewLogArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive1'


class FindManyMaterializedViewLogArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive2'


class FindManyMaterializedViewLogArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive3'


class FindManyMaterializedViewLogArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive4'


class FindManyMaterializedViewLogArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    
    

class MaterializedViewErrorIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class MaterializedViewErrorIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class MaterializedViewErrorIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class MaterializedViewErrorIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class MaterializedViewErrorIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MaterializedViewErrorArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1'


class MaterializedViewErrorArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2'


class MaterializedViewErrorArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3'


class MaterializedViewErrorArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4'


class MaterializedViewErrorArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMaterializedViewErrorArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1'


class FindManyMaterializedViewErrorArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2'


class FindManyMaterializedViewErrorArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3'


class FindManyMaterializedViewErrorArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4'


class FindManyMaterializedViewErrorArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    password: _str
    firstName: _str
    lastName: _str
    role: 'enums.UserRole'
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    password: _str
    firstName: _str
    lastName: _str
    role: 'enums.UserRole'
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    password: bool
    firstName: bool
    lastName: bool
    role: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    password: bool
    firstName: bool
    lastName: bool
    role: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'password': bool,
        'firstName': bool,
        'lastName': bool,
        'role': bool,
        'isActive': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'password': int,
        'firstName': int,
        'lastName': int,
        'role': int,
        'isActive': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'password',
    'firstName',
    'lastName',
    'role',
    'isActive',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'password',
    'firstName',
    'lastName',
    'role',
    'isActive',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = _NoneType

# MaterializedViewLog types

class MaterializedViewLogOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the MaterializedViewLog create method"""
    id: _int
    refreshedAt: datetime.datetime
    durationMs: Optional[_int]
    recordsProcessed: Optional[_int]


class MaterializedViewLogCreateInput(MaterializedViewLogOptionalCreateInput):
    """Required arguments to the MaterializedViewLog create method"""
    viewName: _str
    refreshType: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MaterializedViewLogOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the MaterializedViewLog create method, without relations"""
    id: _int
    refreshedAt: datetime.datetime
    durationMs: Optional[_int]
    recordsProcessed: Optional[_int]


class MaterializedViewLogCreateWithoutRelationsInput(MaterializedViewLogOptionalCreateWithoutRelationsInput):
    """Required arguments to the MaterializedViewLog create method, without relations"""
    viewName: _str
    refreshType: _str

class MaterializedViewLogConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MaterializedViewLogCreateWithoutRelationsInput'
    where: 'MaterializedViewLogWhereUniqueInput'

class MaterializedViewLogCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MaterializedViewLogCreateWithoutRelationsInput'
    connect: 'MaterializedViewLogWhereUniqueInput'
    connect_or_create: 'MaterializedViewLogConnectOrCreateWithoutRelationsInput'


class MaterializedViewLogCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MaterializedViewLogCreateWithoutRelationsInput', List['MaterializedViewLogCreateWithoutRelationsInput']]
    connect: Union['MaterializedViewLogWhereUniqueInput', List['MaterializedViewLogWhereUniqueInput']]
    connect_or_create: Union['MaterializedViewLogConnectOrCreateWithoutRelationsInput', List['MaterializedViewLogConnectOrCreateWithoutRelationsInput']]

_MaterializedViewLogWhereUnique_id_Input = TypedDict(
    '_MaterializedViewLogWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

MaterializedViewLogWhereUniqueInput = _MaterializedViewLogWhereUnique_id_Input


class MaterializedViewLogUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    viewName: _str
    refreshType: _str
    refreshedAt: datetime.datetime
    durationMs: Optional[Union[AtomicIntInput, _int]]
    recordsProcessed: Optional[Union[AtomicIntInput, _int]]


class MaterializedViewLogUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    viewName: _str
    refreshType: _str
    refreshedAt: datetime.datetime
    durationMs: Optional[Union[AtomicIntInput, _int]]
    recordsProcessed: Optional[Union[AtomicIntInput, _int]]


class MaterializedViewLogUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MaterializedViewLogCreateWithoutRelationsInput']
    connect: List['MaterializedViewLogWhereUniqueInput']
    connect_or_create: List['MaterializedViewLogConnectOrCreateWithoutRelationsInput']
    set: List['MaterializedViewLogWhereUniqueInput']
    disconnect: List['MaterializedViewLogWhereUniqueInput']
    delete: List['MaterializedViewLogWhereUniqueInput']

    # TODO
    # update: List['MaterializedViewLogUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MaterializedViewLogUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MaterializedViewLogScalarWhereInput']
    # upsert: List['MaterializedViewLogUpserteWithWhereUniqueWithoutRelationsInput']


class MaterializedViewLogUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MaterializedViewLogCreateWithoutRelationsInput'
    connect: 'MaterializedViewLogWhereUniqueInput'
    connect_or_create: 'MaterializedViewLogConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MaterializedViewLogUpdateInput'
    # upsert: 'MaterializedViewLogUpsertWithoutRelationsInput'


class MaterializedViewLogUpsertInput(TypedDict):
    create: 'MaterializedViewLogCreateInput'
    update: 'MaterializedViewLogUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_MaterializedViewLog_id_OrderByInput = TypedDict(
    '_MaterializedViewLog_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_MaterializedViewLog_viewName_OrderByInput = TypedDict(
    '_MaterializedViewLog_viewName_OrderByInput',
    {
        'viewName': 'SortOrder',
    },
    total=True
)

_MaterializedViewLog_refreshType_OrderByInput = TypedDict(
    '_MaterializedViewLog_refreshType_OrderByInput',
    {
        'refreshType': 'SortOrder',
    },
    total=True
)

_MaterializedViewLog_refreshedAt_OrderByInput = TypedDict(
    '_MaterializedViewLog_refreshedAt_OrderByInput',
    {
        'refreshedAt': 'SortOrder',
    },
    total=True
)

_MaterializedViewLog_durationMs_OrderByInput = TypedDict(
    '_MaterializedViewLog_durationMs_OrderByInput',
    {
        'durationMs': 'SortOrder',
    },
    total=True
)

_MaterializedViewLog_recordsProcessed_OrderByInput = TypedDict(
    '_MaterializedViewLog_recordsProcessed_OrderByInput',
    {
        'recordsProcessed': 'SortOrder',
    },
    total=True
)

_MaterializedViewLog_RelevanceInner = TypedDict(
    '_MaterializedViewLog_RelevanceInner',
    {
        'fields': 'List[MaterializedViewLogScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_MaterializedViewLog_RelevanceOrderByInput = TypedDict(
    '_MaterializedViewLog_RelevanceOrderByInput',
    {
        '_relevance': '_MaterializedViewLog_RelevanceInner',
    },
    total=True
)

MaterializedViewLogOrderByInput = Union[
    '_MaterializedViewLog_id_OrderByInput',
    '_MaterializedViewLog_viewName_OrderByInput',
    '_MaterializedViewLog_refreshType_OrderByInput',
    '_MaterializedViewLog_refreshedAt_OrderByInput',
    '_MaterializedViewLog_durationMs_OrderByInput',
    '_MaterializedViewLog_recordsProcessed_OrderByInput',
    '_MaterializedViewLog_RelevanceOrderByInput',
]



# recursive MaterializedViewLog types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MaterializedViewLogRelationFilter = TypedDict(
    'MaterializedViewLogRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MaterializedViewLogListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MaterializedViewLogInclude(TypedDict, total=False):
    """MaterializedViewLog relational arguments"""


    

class CustomerIncludeFromMaterializedViewLog(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class CustomerIncludeFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class CustomerIncludeFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class CustomerIncludeFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class CustomerIncludeFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""

    

class CustomerArgsFromMaterializedViewLog(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'CustomerIncludeFromCustomerRecursive1'


class CustomerArgsFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'CustomerIncludeFromCustomerRecursive2'


class CustomerArgsFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'CustomerIncludeFromCustomerRecursive3'


class CustomerArgsFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'CustomerIncludeFromCustomerRecursive4'


class CustomerArgsFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    
    

class FindManyCustomerArgsFromMaterializedViewLog(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive1'


class FindManyCustomerArgsFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive2'


class FindManyCustomerArgsFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive3'


class FindManyCustomerArgsFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive4'


class FindManyCustomerArgsFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    
    

class CompanyIncludeFromMaterializedViewLog(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""
    prospects: Union[bool, 'FindManyProspectArgsFromMaterializedViewLogRecursive1']


class CompanyIncludeFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""
    prospects: Union[bool, 'FindManyProspectArgsFromMaterializedViewLogRecursive2']


class CompanyIncludeFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""
    prospects: Union[bool, 'FindManyProspectArgsFromMaterializedViewLogRecursive3']


class CompanyIncludeFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""
    prospects: Union[bool, 'FindManyProspectArgsFromMaterializedViewLogRecursive4']


class CompanyIncludeFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""

    

class CompanyArgsFromMaterializedViewLog(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    
    

class FindManyCompanyArgsFromMaterializedViewLog(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class ProspectIncludeFromMaterializedViewLog(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""
    company: Union[bool, 'CompanyArgsFromMaterializedViewLogRecursive1']


class ProspectIncludeFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""
    company: Union[bool, 'CompanyArgsFromMaterializedViewLogRecursive2']


class ProspectIncludeFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""
    company: Union[bool, 'CompanyArgsFromMaterializedViewLogRecursive3']


class ProspectIncludeFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""
    company: Union[bool, 'CompanyArgsFromMaterializedViewLogRecursive4']


class ProspectIncludeFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""

    

class ProspectArgsFromMaterializedViewLog(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'ProspectIncludeFromProspectRecursive1'


class ProspectArgsFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'ProspectIncludeFromProspectRecursive2'


class ProspectArgsFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'ProspectIncludeFromProspectRecursive3'


class ProspectArgsFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'ProspectIncludeFromProspectRecursive4'


class ProspectArgsFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    
    

class FindManyProspectArgsFromMaterializedViewLog(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive1'


class FindManyProspectArgsFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive2'


class FindManyProspectArgsFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive3'


class FindManyProspectArgsFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive4'


class FindManyProspectArgsFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    
    

class UserIncludeFromMaterializedViewLog(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class UserIncludeFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class UserIncludeFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class UserIncludeFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class UserIncludeFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""

    

class UserArgsFromMaterializedViewLog(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    
    

class FindManyUserArgsFromMaterializedViewLog(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class MaterializedViewLogIncludeFromMaterializedViewLog(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class MaterializedViewLogIncludeFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class MaterializedViewLogIncludeFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class MaterializedViewLogIncludeFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class MaterializedViewLogIncludeFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""

    

class MaterializedViewLogArgsFromMaterializedViewLog(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive1'


class MaterializedViewLogArgsFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive2'


class MaterializedViewLogArgsFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive3'


class MaterializedViewLogArgsFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive4'


class MaterializedViewLogArgsFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    
    

class FindManyMaterializedViewLogArgsFromMaterializedViewLog(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive1'


class FindManyMaterializedViewLogArgsFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive2'


class FindManyMaterializedViewLogArgsFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive3'


class FindManyMaterializedViewLogArgsFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive4'


class FindManyMaterializedViewLogArgsFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    
    

class MaterializedViewErrorIncludeFromMaterializedViewLog(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class MaterializedViewErrorIncludeFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class MaterializedViewErrorIncludeFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class MaterializedViewErrorIncludeFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""


class MaterializedViewErrorIncludeFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Relational arguments for MaterializedViewLog"""

    

class MaterializedViewErrorArgsFromMaterializedViewLog(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1'


class MaterializedViewErrorArgsFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2'


class MaterializedViewErrorArgsFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3'


class MaterializedViewErrorArgsFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4'


class MaterializedViewErrorArgsFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    
    

class FindManyMaterializedViewErrorArgsFromMaterializedViewLog(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1'


class FindManyMaterializedViewErrorArgsFromMaterializedViewLogRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2'


class FindManyMaterializedViewErrorArgsFromMaterializedViewLogRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3'


class FindManyMaterializedViewErrorArgsFromMaterializedViewLogRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4'


class FindManyMaterializedViewErrorArgsFromMaterializedViewLogRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewLog"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    


FindManyMaterializedViewLogArgs = FindManyMaterializedViewLogArgsFromMaterializedViewLog
FindFirstMaterializedViewLogArgs = FindManyMaterializedViewLogArgsFromMaterializedViewLog


    

class MaterializedViewLogWhereInput(TypedDict, total=False):
    """MaterializedViewLog arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    viewName: Union[_str, 'types.StringFilter']
    refreshType: Union[_str, 'types.StringFilter']
    refreshedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    durationMs: Union[None, _int, 'types.IntFilter']
    recordsProcessed: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['MaterializedViewLogWhereInputRecursive1', List['MaterializedViewLogWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MaterializedViewLogWhereInputRecursive1']
    OR: List['MaterializedViewLogWhereInputRecursive1']
    NOT: List['MaterializedViewLogWhereInputRecursive1']


class MaterializedViewLogWhereInputRecursive1(TypedDict, total=False):
    """MaterializedViewLog arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    viewName: Union[_str, 'types.StringFilter']
    refreshType: Union[_str, 'types.StringFilter']
    refreshedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    durationMs: Union[None, _int, 'types.IntFilter']
    recordsProcessed: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['MaterializedViewLogWhereInputRecursive2', List['MaterializedViewLogWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MaterializedViewLogWhereInputRecursive2']
    OR: List['MaterializedViewLogWhereInputRecursive2']
    NOT: List['MaterializedViewLogWhereInputRecursive2']


class MaterializedViewLogWhereInputRecursive2(TypedDict, total=False):
    """MaterializedViewLog arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    viewName: Union[_str, 'types.StringFilter']
    refreshType: Union[_str, 'types.StringFilter']
    refreshedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    durationMs: Union[None, _int, 'types.IntFilter']
    recordsProcessed: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['MaterializedViewLogWhereInputRecursive3', List['MaterializedViewLogWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MaterializedViewLogWhereInputRecursive3']
    OR: List['MaterializedViewLogWhereInputRecursive3']
    NOT: List['MaterializedViewLogWhereInputRecursive3']


class MaterializedViewLogWhereInputRecursive3(TypedDict, total=False):
    """MaterializedViewLog arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    viewName: Union[_str, 'types.StringFilter']
    refreshType: Union[_str, 'types.StringFilter']
    refreshedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    durationMs: Union[None, _int, 'types.IntFilter']
    recordsProcessed: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['MaterializedViewLogWhereInputRecursive4', List['MaterializedViewLogWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MaterializedViewLogWhereInputRecursive4']
    OR: List['MaterializedViewLogWhereInputRecursive4']
    NOT: List['MaterializedViewLogWhereInputRecursive4']


class MaterializedViewLogWhereInputRecursive4(TypedDict, total=False):
    """MaterializedViewLog arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    viewName: Union[_str, 'types.StringFilter']
    refreshType: Union[_str, 'types.StringFilter']
    refreshedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    durationMs: Union[None, _int, 'types.IntFilter']
    recordsProcessed: Union[None, _int, 'types.IntFilter']



# aggregate MaterializedViewLog types


    

class MaterializedViewLogScalarWhereWithAggregatesInput(TypedDict, total=False):
    """MaterializedViewLog arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    viewName: Union[_str, 'types.StringWithAggregatesFilter']
    refreshType: Union[_str, 'types.StringWithAggregatesFilter']
    refreshedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    durationMs: Union[_int, 'types.IntWithAggregatesFilter']
    recordsProcessed: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['MaterializedViewLogScalarWhereWithAggregatesInputRecursive1']
    OR: List['MaterializedViewLogScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MaterializedViewLogScalarWhereWithAggregatesInputRecursive1']


class MaterializedViewLogScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """MaterializedViewLog arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    viewName: Union[_str, 'types.StringWithAggregatesFilter']
    refreshType: Union[_str, 'types.StringWithAggregatesFilter']
    refreshedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    durationMs: Union[_int, 'types.IntWithAggregatesFilter']
    recordsProcessed: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['MaterializedViewLogScalarWhereWithAggregatesInputRecursive2']
    OR: List['MaterializedViewLogScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MaterializedViewLogScalarWhereWithAggregatesInputRecursive2']


class MaterializedViewLogScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """MaterializedViewLog arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    viewName: Union[_str, 'types.StringWithAggregatesFilter']
    refreshType: Union[_str, 'types.StringWithAggregatesFilter']
    refreshedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    durationMs: Union[_int, 'types.IntWithAggregatesFilter']
    recordsProcessed: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['MaterializedViewLogScalarWhereWithAggregatesInputRecursive3']
    OR: List['MaterializedViewLogScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MaterializedViewLogScalarWhereWithAggregatesInputRecursive3']


class MaterializedViewLogScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """MaterializedViewLog arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    viewName: Union[_str, 'types.StringWithAggregatesFilter']
    refreshType: Union[_str, 'types.StringWithAggregatesFilter']
    refreshedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    durationMs: Union[_int, 'types.IntWithAggregatesFilter']
    recordsProcessed: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['MaterializedViewLogScalarWhereWithAggregatesInputRecursive4']
    OR: List['MaterializedViewLogScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MaterializedViewLogScalarWhereWithAggregatesInputRecursive4']


class MaterializedViewLogScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """MaterializedViewLog arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    viewName: Union[_str, 'types.StringWithAggregatesFilter']
    refreshType: Union[_str, 'types.StringWithAggregatesFilter']
    refreshedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    durationMs: Union[_int, 'types.IntWithAggregatesFilter']
    recordsProcessed: Union[_int, 'types.IntWithAggregatesFilter']



class MaterializedViewLogGroupByOutput(TypedDict, total=False):
    id: _int
    viewName: _str
    refreshType: _str
    refreshedAt: datetime.datetime
    durationMs: _int
    recordsProcessed: _int
    _sum: 'MaterializedViewLogSumAggregateOutput'
    _avg: 'MaterializedViewLogAvgAggregateOutput'
    _min: 'MaterializedViewLogMinAggregateOutput'
    _max: 'MaterializedViewLogMaxAggregateOutput'
    _count: 'MaterializedViewLogCountAggregateOutput'


class MaterializedViewLogAvgAggregateOutput(TypedDict, total=False):
    """MaterializedViewLog output for aggregating averages"""
    id: float
    durationMs: float
    recordsProcessed: float


class MaterializedViewLogSumAggregateOutput(TypedDict, total=False):
    """MaterializedViewLog output for aggregating sums"""
    id: _int
    durationMs: _int
    recordsProcessed: _int


class MaterializedViewLogScalarAggregateOutput(TypedDict, total=False):
    """MaterializedViewLog output including scalar fields"""
    id: _int
    viewName: _str
    refreshType: _str
    refreshedAt: datetime.datetime
    durationMs: _int
    recordsProcessed: _int


MaterializedViewLogMinAggregateOutput = MaterializedViewLogScalarAggregateOutput
MaterializedViewLogMaxAggregateOutput = MaterializedViewLogScalarAggregateOutput


class MaterializedViewLogMaxAggregateInput(TypedDict, total=False):
    """MaterializedViewLog input for aggregating by max"""
    id: bool
    viewName: bool
    refreshType: bool
    refreshedAt: bool
    durationMs: bool
    recordsProcessed: bool


class MaterializedViewLogMinAggregateInput(TypedDict, total=False):
    """MaterializedViewLog input for aggregating by min"""
    id: bool
    viewName: bool
    refreshType: bool
    refreshedAt: bool
    durationMs: bool
    recordsProcessed: bool


class MaterializedViewLogNumberAggregateInput(TypedDict, total=False):
    """MaterializedViewLog input for aggregating numbers"""
    id: bool
    durationMs: bool
    recordsProcessed: bool


MaterializedViewLogAvgAggregateInput = MaterializedViewLogNumberAggregateInput
MaterializedViewLogSumAggregateInput = MaterializedViewLogNumberAggregateInput


MaterializedViewLogCountAggregateInput = TypedDict(
    'MaterializedViewLogCountAggregateInput',
    {
        'id': bool,
        'viewName': bool,
        'refreshType': bool,
        'refreshedAt': bool,
        'durationMs': bool,
        'recordsProcessed': bool,
        '_all': bool,
    },
    total=False,
)

MaterializedViewLogCountAggregateOutput = TypedDict(
    'MaterializedViewLogCountAggregateOutput',
    {
        'id': int,
        'viewName': int,
        'refreshType': int,
        'refreshedAt': int,
        'durationMs': int,
        'recordsProcessed': int,
        '_all': int,
    },
    total=False,
)


MaterializedViewLogKeys = Literal[
    'id',
    'viewName',
    'refreshType',
    'refreshedAt',
    'durationMs',
    'recordsProcessed',
]
MaterializedViewLogScalarFieldKeys = Literal[
    'id',
    'viewName',
    'refreshType',
    'refreshedAt',
    'durationMs',
    'recordsProcessed',
]
MaterializedViewLogScalarFieldKeysT = TypeVar('MaterializedViewLogScalarFieldKeysT', bound=MaterializedViewLogScalarFieldKeys)

MaterializedViewLogRelationalFieldKeys = _NoneType

# MaterializedViewError types

class MaterializedViewErrorOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the MaterializedViewError create method"""
    id: _int
    viewName: Optional[_str]
    errorMessage: Optional[_str]
    occurredAt: datetime.datetime


class MaterializedViewErrorCreateInput(MaterializedViewErrorOptionalCreateInput):
    """Required arguments to the MaterializedViewError create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MaterializedViewErrorOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the MaterializedViewError create method, without relations"""
    id: _int
    viewName: Optional[_str]
    errorMessage: Optional[_str]
    occurredAt: datetime.datetime


class MaterializedViewErrorCreateWithoutRelationsInput(MaterializedViewErrorOptionalCreateWithoutRelationsInput):
    """Required arguments to the MaterializedViewError create method, without relations"""

class MaterializedViewErrorConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MaterializedViewErrorCreateWithoutRelationsInput'
    where: 'MaterializedViewErrorWhereUniqueInput'

class MaterializedViewErrorCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MaterializedViewErrorCreateWithoutRelationsInput'
    connect: 'MaterializedViewErrorWhereUniqueInput'
    connect_or_create: 'MaterializedViewErrorConnectOrCreateWithoutRelationsInput'


class MaterializedViewErrorCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MaterializedViewErrorCreateWithoutRelationsInput', List['MaterializedViewErrorCreateWithoutRelationsInput']]
    connect: Union['MaterializedViewErrorWhereUniqueInput', List['MaterializedViewErrorWhereUniqueInput']]
    connect_or_create: Union['MaterializedViewErrorConnectOrCreateWithoutRelationsInput', List['MaterializedViewErrorConnectOrCreateWithoutRelationsInput']]

_MaterializedViewErrorWhereUnique_id_Input = TypedDict(
    '_MaterializedViewErrorWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

MaterializedViewErrorWhereUniqueInput = _MaterializedViewErrorWhereUnique_id_Input


class MaterializedViewErrorUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    viewName: Optional[_str]
    errorMessage: Optional[_str]
    occurredAt: datetime.datetime


class MaterializedViewErrorUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    viewName: Optional[_str]
    errorMessage: Optional[_str]
    occurredAt: datetime.datetime


class MaterializedViewErrorUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MaterializedViewErrorCreateWithoutRelationsInput']
    connect: List['MaterializedViewErrorWhereUniqueInput']
    connect_or_create: List['MaterializedViewErrorConnectOrCreateWithoutRelationsInput']
    set: List['MaterializedViewErrorWhereUniqueInput']
    disconnect: List['MaterializedViewErrorWhereUniqueInput']
    delete: List['MaterializedViewErrorWhereUniqueInput']

    # TODO
    # update: List['MaterializedViewErrorUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MaterializedViewErrorUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MaterializedViewErrorScalarWhereInput']
    # upsert: List['MaterializedViewErrorUpserteWithWhereUniqueWithoutRelationsInput']


class MaterializedViewErrorUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MaterializedViewErrorCreateWithoutRelationsInput'
    connect: 'MaterializedViewErrorWhereUniqueInput'
    connect_or_create: 'MaterializedViewErrorConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MaterializedViewErrorUpdateInput'
    # upsert: 'MaterializedViewErrorUpsertWithoutRelationsInput'


class MaterializedViewErrorUpsertInput(TypedDict):
    create: 'MaterializedViewErrorCreateInput'
    update: 'MaterializedViewErrorUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_MaterializedViewError_id_OrderByInput = TypedDict(
    '_MaterializedViewError_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_MaterializedViewError_viewName_OrderByInput = TypedDict(
    '_MaterializedViewError_viewName_OrderByInput',
    {
        'viewName': 'SortOrder',
    },
    total=True
)

_MaterializedViewError_errorMessage_OrderByInput = TypedDict(
    '_MaterializedViewError_errorMessage_OrderByInput',
    {
        'errorMessage': 'SortOrder',
    },
    total=True
)

_MaterializedViewError_occurredAt_OrderByInput = TypedDict(
    '_MaterializedViewError_occurredAt_OrderByInput',
    {
        'occurredAt': 'SortOrder',
    },
    total=True
)

_MaterializedViewError_RelevanceInner = TypedDict(
    '_MaterializedViewError_RelevanceInner',
    {
        'fields': 'List[MaterializedViewErrorScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_MaterializedViewError_RelevanceOrderByInput = TypedDict(
    '_MaterializedViewError_RelevanceOrderByInput',
    {
        '_relevance': '_MaterializedViewError_RelevanceInner',
    },
    total=True
)

MaterializedViewErrorOrderByInput = Union[
    '_MaterializedViewError_id_OrderByInput',
    '_MaterializedViewError_viewName_OrderByInput',
    '_MaterializedViewError_errorMessage_OrderByInput',
    '_MaterializedViewError_occurredAt_OrderByInput',
    '_MaterializedViewError_RelevanceOrderByInput',
]



# recursive MaterializedViewError types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MaterializedViewErrorRelationFilter = TypedDict(
    'MaterializedViewErrorRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MaterializedViewErrorListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MaterializedViewErrorInclude(TypedDict, total=False):
    """MaterializedViewError relational arguments"""


    

class CustomerIncludeFromMaterializedViewError(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class CustomerIncludeFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class CustomerIncludeFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class CustomerIncludeFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class CustomerIncludeFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""

    

class CustomerArgsFromMaterializedViewError(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'CustomerIncludeFromCustomerRecursive1'


class CustomerArgsFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'CustomerIncludeFromCustomerRecursive2'


class CustomerArgsFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'CustomerIncludeFromCustomerRecursive3'


class CustomerArgsFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'CustomerIncludeFromCustomerRecursive4'


class CustomerArgsFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    
    

class FindManyCustomerArgsFromMaterializedViewError(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive1'


class FindManyCustomerArgsFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive2'


class FindManyCustomerArgsFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive3'


class FindManyCustomerArgsFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive4'


class FindManyCustomerArgsFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    
    

class CompanyIncludeFromMaterializedViewError(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""
    prospects: Union[bool, 'FindManyProspectArgsFromMaterializedViewErrorRecursive1']


class CompanyIncludeFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""
    prospects: Union[bool, 'FindManyProspectArgsFromMaterializedViewErrorRecursive2']


class CompanyIncludeFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""
    prospects: Union[bool, 'FindManyProspectArgsFromMaterializedViewErrorRecursive3']


class CompanyIncludeFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""
    prospects: Union[bool, 'FindManyProspectArgsFromMaterializedViewErrorRecursive4']


class CompanyIncludeFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""

    

class CompanyArgsFromMaterializedViewError(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    
    

class FindManyCompanyArgsFromMaterializedViewError(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class ProspectIncludeFromMaterializedViewError(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""
    company: Union[bool, 'CompanyArgsFromMaterializedViewErrorRecursive1']


class ProspectIncludeFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""
    company: Union[bool, 'CompanyArgsFromMaterializedViewErrorRecursive2']


class ProspectIncludeFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""
    company: Union[bool, 'CompanyArgsFromMaterializedViewErrorRecursive3']


class ProspectIncludeFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""
    company: Union[bool, 'CompanyArgsFromMaterializedViewErrorRecursive4']


class ProspectIncludeFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""

    

class ProspectArgsFromMaterializedViewError(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'ProspectIncludeFromProspectRecursive1'


class ProspectArgsFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'ProspectIncludeFromProspectRecursive2'


class ProspectArgsFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'ProspectIncludeFromProspectRecursive3'


class ProspectArgsFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'ProspectIncludeFromProspectRecursive4'


class ProspectArgsFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    
    

class FindManyProspectArgsFromMaterializedViewError(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive1'


class FindManyProspectArgsFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive2'


class FindManyProspectArgsFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive3'


class FindManyProspectArgsFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    include: 'ProspectIncludeFromProspectRecursive4'


class FindManyProspectArgsFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['ProspectOrderByInput', List['ProspectOrderByInput']]
    where: 'ProspectWhereInput'
    cursor: 'ProspectWhereUniqueInput'
    distinct: List['ProspectScalarFieldKeys']
    
    

class UserIncludeFromMaterializedViewError(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class UserIncludeFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class UserIncludeFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class UserIncludeFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class UserIncludeFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""

    

class UserArgsFromMaterializedViewError(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    
    

class FindManyUserArgsFromMaterializedViewError(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class MaterializedViewLogIncludeFromMaterializedViewError(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class MaterializedViewLogIncludeFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class MaterializedViewLogIncludeFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class MaterializedViewLogIncludeFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class MaterializedViewLogIncludeFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""

    

class MaterializedViewLogArgsFromMaterializedViewError(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive1'


class MaterializedViewLogArgsFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive2'


class MaterializedViewLogArgsFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive3'


class MaterializedViewLogArgsFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive4'


class MaterializedViewLogArgsFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    
    

class FindManyMaterializedViewLogArgsFromMaterializedViewError(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive1'


class FindManyMaterializedViewLogArgsFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive2'


class FindManyMaterializedViewLogArgsFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive3'


class FindManyMaterializedViewLogArgsFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    include: 'MaterializedViewLogIncludeFromMaterializedViewLogRecursive4'


class FindManyMaterializedViewLogArgsFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['MaterializedViewLogOrderByInput', List['MaterializedViewLogOrderByInput']]
    where: 'MaterializedViewLogWhereInput'
    cursor: 'MaterializedViewLogWhereUniqueInput'
    distinct: List['MaterializedViewLogScalarFieldKeys']
    
    

class MaterializedViewErrorIncludeFromMaterializedViewError(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""


class MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Relational arguments for MaterializedViewError"""

    

class MaterializedViewErrorArgsFromMaterializedViewError(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1'


class MaterializedViewErrorArgsFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2'


class MaterializedViewErrorArgsFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3'


class MaterializedViewErrorArgsFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4'


class MaterializedViewErrorArgsFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    
    

class FindManyMaterializedViewErrorArgsFromMaterializedViewError(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive1'


class FindManyMaterializedViewErrorArgsFromMaterializedViewErrorRecursive1(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive2'


class FindManyMaterializedViewErrorArgsFromMaterializedViewErrorRecursive2(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive3'


class FindManyMaterializedViewErrorArgsFromMaterializedViewErrorRecursive3(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    include: 'MaterializedViewErrorIncludeFromMaterializedViewErrorRecursive4'


class FindManyMaterializedViewErrorArgsFromMaterializedViewErrorRecursive4(TypedDict, total=False):
    """Arguments for MaterializedViewError"""
    take: int
    skip: int
    order_by: Union['MaterializedViewErrorOrderByInput', List['MaterializedViewErrorOrderByInput']]
    where: 'MaterializedViewErrorWhereInput'
    cursor: 'MaterializedViewErrorWhereUniqueInput'
    distinct: List['MaterializedViewErrorScalarFieldKeys']
    


FindManyMaterializedViewErrorArgs = FindManyMaterializedViewErrorArgsFromMaterializedViewError
FindFirstMaterializedViewErrorArgs = FindManyMaterializedViewErrorArgsFromMaterializedViewError


    

class MaterializedViewErrorWhereInput(TypedDict, total=False):
    """MaterializedViewError arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    viewName: Union[None, _str, 'types.StringFilter']
    errorMessage: Union[None, _str, 'types.StringFilter']
    occurredAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MaterializedViewErrorWhereInputRecursive1', List['MaterializedViewErrorWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MaterializedViewErrorWhereInputRecursive1']
    OR: List['MaterializedViewErrorWhereInputRecursive1']
    NOT: List['MaterializedViewErrorWhereInputRecursive1']


class MaterializedViewErrorWhereInputRecursive1(TypedDict, total=False):
    """MaterializedViewError arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    viewName: Union[None, _str, 'types.StringFilter']
    errorMessage: Union[None, _str, 'types.StringFilter']
    occurredAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MaterializedViewErrorWhereInputRecursive2', List['MaterializedViewErrorWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MaterializedViewErrorWhereInputRecursive2']
    OR: List['MaterializedViewErrorWhereInputRecursive2']
    NOT: List['MaterializedViewErrorWhereInputRecursive2']


class MaterializedViewErrorWhereInputRecursive2(TypedDict, total=False):
    """MaterializedViewError arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    viewName: Union[None, _str, 'types.StringFilter']
    errorMessage: Union[None, _str, 'types.StringFilter']
    occurredAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MaterializedViewErrorWhereInputRecursive3', List['MaterializedViewErrorWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MaterializedViewErrorWhereInputRecursive3']
    OR: List['MaterializedViewErrorWhereInputRecursive3']
    NOT: List['MaterializedViewErrorWhereInputRecursive3']


class MaterializedViewErrorWhereInputRecursive3(TypedDict, total=False):
    """MaterializedViewError arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    viewName: Union[None, _str, 'types.StringFilter']
    errorMessage: Union[None, _str, 'types.StringFilter']
    occurredAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MaterializedViewErrorWhereInputRecursive4', List['MaterializedViewErrorWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MaterializedViewErrorWhereInputRecursive4']
    OR: List['MaterializedViewErrorWhereInputRecursive4']
    NOT: List['MaterializedViewErrorWhereInputRecursive4']


class MaterializedViewErrorWhereInputRecursive4(TypedDict, total=False):
    """MaterializedViewError arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    viewName: Union[None, _str, 'types.StringFilter']
    errorMessage: Union[None, _str, 'types.StringFilter']
    occurredAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate MaterializedViewError types


    

class MaterializedViewErrorScalarWhereWithAggregatesInput(TypedDict, total=False):
    """MaterializedViewError arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    viewName: Union[_str, 'types.StringWithAggregatesFilter']
    errorMessage: Union[_str, 'types.StringWithAggregatesFilter']
    occurredAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MaterializedViewErrorScalarWhereWithAggregatesInputRecursive1']
    OR: List['MaterializedViewErrorScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MaterializedViewErrorScalarWhereWithAggregatesInputRecursive1']


class MaterializedViewErrorScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """MaterializedViewError arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    viewName: Union[_str, 'types.StringWithAggregatesFilter']
    errorMessage: Union[_str, 'types.StringWithAggregatesFilter']
    occurredAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MaterializedViewErrorScalarWhereWithAggregatesInputRecursive2']
    OR: List['MaterializedViewErrorScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MaterializedViewErrorScalarWhereWithAggregatesInputRecursive2']


class MaterializedViewErrorScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """MaterializedViewError arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    viewName: Union[_str, 'types.StringWithAggregatesFilter']
    errorMessage: Union[_str, 'types.StringWithAggregatesFilter']
    occurredAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MaterializedViewErrorScalarWhereWithAggregatesInputRecursive3']
    OR: List['MaterializedViewErrorScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MaterializedViewErrorScalarWhereWithAggregatesInputRecursive3']


class MaterializedViewErrorScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """MaterializedViewError arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    viewName: Union[_str, 'types.StringWithAggregatesFilter']
    errorMessage: Union[_str, 'types.StringWithAggregatesFilter']
    occurredAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MaterializedViewErrorScalarWhereWithAggregatesInputRecursive4']
    OR: List['MaterializedViewErrorScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MaterializedViewErrorScalarWhereWithAggregatesInputRecursive4']


class MaterializedViewErrorScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """MaterializedViewError arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    viewName: Union[_str, 'types.StringWithAggregatesFilter']
    errorMessage: Union[_str, 'types.StringWithAggregatesFilter']
    occurredAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class MaterializedViewErrorGroupByOutput(TypedDict, total=False):
    id: _int
    viewName: _str
    errorMessage: _str
    occurredAt: datetime.datetime
    _sum: 'MaterializedViewErrorSumAggregateOutput'
    _avg: 'MaterializedViewErrorAvgAggregateOutput'
    _min: 'MaterializedViewErrorMinAggregateOutput'
    _max: 'MaterializedViewErrorMaxAggregateOutput'
    _count: 'MaterializedViewErrorCountAggregateOutput'


class MaterializedViewErrorAvgAggregateOutput(TypedDict, total=False):
    """MaterializedViewError output for aggregating averages"""
    id: float


class MaterializedViewErrorSumAggregateOutput(TypedDict, total=False):
    """MaterializedViewError output for aggregating sums"""
    id: _int


class MaterializedViewErrorScalarAggregateOutput(TypedDict, total=False):
    """MaterializedViewError output including scalar fields"""
    id: _int
    viewName: _str
    errorMessage: _str
    occurredAt: datetime.datetime


MaterializedViewErrorMinAggregateOutput = MaterializedViewErrorScalarAggregateOutput
MaterializedViewErrorMaxAggregateOutput = MaterializedViewErrorScalarAggregateOutput


class MaterializedViewErrorMaxAggregateInput(TypedDict, total=False):
    """MaterializedViewError input for aggregating by max"""
    id: bool
    viewName: bool
    errorMessage: bool
    occurredAt: bool


class MaterializedViewErrorMinAggregateInput(TypedDict, total=False):
    """MaterializedViewError input for aggregating by min"""
    id: bool
    viewName: bool
    errorMessage: bool
    occurredAt: bool


class MaterializedViewErrorNumberAggregateInput(TypedDict, total=False):
    """MaterializedViewError input for aggregating numbers"""
    id: bool


MaterializedViewErrorAvgAggregateInput = MaterializedViewErrorNumberAggregateInput
MaterializedViewErrorSumAggregateInput = MaterializedViewErrorNumberAggregateInput


MaterializedViewErrorCountAggregateInput = TypedDict(
    'MaterializedViewErrorCountAggregateInput',
    {
        'id': bool,
        'viewName': bool,
        'errorMessage': bool,
        'occurredAt': bool,
        '_all': bool,
    },
    total=False,
)

MaterializedViewErrorCountAggregateOutput = TypedDict(
    'MaterializedViewErrorCountAggregateOutput',
    {
        'id': int,
        'viewName': int,
        'errorMessage': int,
        'occurredAt': int,
        '_all': int,
    },
    total=False,
)


MaterializedViewErrorKeys = Literal[
    'id',
    'viewName',
    'errorMessage',
    'occurredAt',
]
MaterializedViewErrorScalarFieldKeys = Literal[
    'id',
    'viewName',
    'errorMessage',
    'occurredAt',
]
MaterializedViewErrorScalarFieldKeysT = TypeVar('MaterializedViewErrorScalarFieldKeysT', bound=MaterializedViewErrorScalarFieldKeys)

MaterializedViewErrorRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields