name: Publish Schema Version

on:
  push:
    tags:
      - 'schema-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Schema version to publish'
        required: true
        default: 'latest'

jobs:
  publish-schema:
    runs-on: ubuntu-latest

    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker compose build schema-service

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=${GITHUB_REF#refs/tags/schema-}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      # - name: Validate Schema and Generate Clients
      #   run: |
      #     docker compose run --rm -v "$(pwd):/app" schema-service ./scripts/validate-schema.sh ${{ steps.version.outputs.version }}
      #     docker compose run --rm -v "$(pwd):/app" schema-service ./scripts/generate-clients.sh ${{ steps.version.outputs.version }} all

      - name: Publish Schema Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker compose run --rm -e GITHUB_TOKEN -e GITHUB_REPO -v "$(pwd):/app" schema-service ./scripts/publish.sh ${{ steps.version.outputs.version }}

      - name: ðŸš€ Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            schema-${{ steps.version.outputs.version }}.tar.gz
            client-${{ steps.version.outputs.version }}-node.tar.gz
            client-${{ steps.version.outputs.version }}-python.tar.gz
            client-${{ steps.version.outputs.version }}-typescript.tar.gz
            migrations-${{ steps.version.outputs.version }}.tar.gz
          draft: false
          prerelease: false
          tag_name: schema-${{ steps.version.outputs.version }}
          name: Schema Version ${{ steps.version.outputs.version }}
          body: |
            ## Schema Version ${{ steps.version.outputs.version }}

            ### What's included:
            - Schema file: schema.prisma
            - Generated clients: Node.js, Python, TypeScript
            - Migration scripts: Database migration files

            ### Usage:
            ```bash
            # Download latest version
            curl -L https://github.com/${{ github.repository }}/releases/latest/download/schema-latest.tar.gz | tar -xz

            # Download specific version
            curl -L https://github.com/${{ github.repository }}/releases/download/schema-${{ steps.version.outputs.version }}/schema-${{ steps.version.outputs.version }}.tar.gz | tar -xz
            ```

            ### Files:
            - `schema-${{ steps.version.outputs.version }}.tar.gz` - Complete schema package
            - `client-${{ steps.version.outputs.version }}-node.tar.gz` - Node.js client
            - `client-${{ steps.version.outputs.version }}-python.tar.gz` - Python client
            - `client-${{ steps.version.outputs.version }}-typescript.tar.gz` - TypeScript types
            - `migrations-${{ steps.version.outputs.version }}.tar.gz` - Database migrations

      - name: Notify Services
        run: |
          echo "ðŸ“¢ Schema version ${{ steps.version.outputs.version }} published successfully!"
          echo "ðŸš€ Services can now pull this version from GitHub releases"
          echo "ðŸ“‹ Release URL: https://github.com/${{ github.repository }}/releases/tag/schema-${{ steps.version.outputs.version }}"